// Generated by view binder compiler. Do not edit!
package com.android.launcher3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.launcher3.R;
import com.saggitt.omega.views.PreferenceNestedScrollView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAppCategorizationBinding implements ViewBinding {
  @NonNull
  private final PreferenceNestedScrollView rootView;

  @NonNull
  public final AppCategorizationEnableToggleBinding enableToggle;

  @NonNull
  public final AppCategorizationTypeItemBinding folderTypeItem;

  @NonNull
  public final RecyclerView recyclerView;

  @NonNull
  public final SettingsCategoryV2Binding styleHeader;

  @NonNull
  public final AppCategorizationTypeItemBinding tabTypeItem;

  private FragmentAppCategorizationBinding(@NonNull PreferenceNestedScrollView rootView,
      @NonNull AppCategorizationEnableToggleBinding enableToggle,
      @NonNull AppCategorizationTypeItemBinding folderTypeItem, @NonNull RecyclerView recyclerView,
      @NonNull SettingsCategoryV2Binding styleHeader,
      @NonNull AppCategorizationTypeItemBinding tabTypeItem) {
    this.rootView = rootView;
    this.enableToggle = enableToggle;
    this.folderTypeItem = folderTypeItem;
    this.recyclerView = recyclerView;
    this.styleHeader = styleHeader;
    this.tabTypeItem = tabTypeItem;
  }

  @Override
  @NonNull
  public PreferenceNestedScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAppCategorizationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAppCategorizationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_app_categorization, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAppCategorizationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.enableToggle;
      View enableToggle = ViewBindings.findChildViewById(rootView, id);
      if (enableToggle == null) {
        break missingId;
      }
      AppCategorizationEnableToggleBinding binding_enableToggle = AppCategorizationEnableToggleBinding.bind(enableToggle);

      id = R.id.folderTypeItem;
      View folderTypeItem = ViewBindings.findChildViewById(rootView, id);
      if (folderTypeItem == null) {
        break missingId;
      }
      AppCategorizationTypeItemBinding binding_folderTypeItem = AppCategorizationTypeItemBinding.bind(folderTypeItem);

      id = R.id.recyclerView;
      RecyclerView recyclerView = ViewBindings.findChildViewById(rootView, id);
      if (recyclerView == null) {
        break missingId;
      }

      id = R.id.styleHeader;
      View styleHeader = ViewBindings.findChildViewById(rootView, id);
      if (styleHeader == null) {
        break missingId;
      }
      SettingsCategoryV2Binding binding_styleHeader = SettingsCategoryV2Binding.bind(styleHeader);

      id = R.id.tabTypeItem;
      View tabTypeItem = ViewBindings.findChildViewById(rootView, id);
      if (tabTypeItem == null) {
        break missingId;
      }
      AppCategorizationTypeItemBinding binding_tabTypeItem = AppCategorizationTypeItemBinding.bind(tabTypeItem);

      return new FragmentAppCategorizationBinding((PreferenceNestedScrollView) rootView,
          binding_enableToggle, binding_folderTypeItem, recyclerView, binding_styleHeader,
          binding_tabTypeItem);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
