// Generated by view binder compiler. Do not edit!
package com.android.launcher3.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.android.launcher3.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentIconCustomizationBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CustomIconAdaptiveBinding adaptiveIcons;

  @NonNull
  public final CustomIconColoredBinding coloredIcons;

  @NonNull
  public final CustomIconLegacyBinding legacyIcons;

  @NonNull
  public final DesktopPreviewBinding previewFrame;

  @NonNull
  public final RecyclerView shapeView;

  @NonNull
  public final CustomIconShapelessBinding shapelessIcons;

  @NonNull
  public final CustomIconWhiteBinding whiteIcons;

  private FragmentIconCustomizationBinding(@NonNull LinearLayout rootView,
      @NonNull CustomIconAdaptiveBinding adaptiveIcons,
      @NonNull CustomIconColoredBinding coloredIcons, @NonNull CustomIconLegacyBinding legacyIcons,
      @NonNull DesktopPreviewBinding previewFrame, @NonNull RecyclerView shapeView,
      @NonNull CustomIconShapelessBinding shapelessIcons,
      @NonNull CustomIconWhiteBinding whiteIcons) {
    this.rootView = rootView;
    this.adaptiveIcons = adaptiveIcons;
    this.coloredIcons = coloredIcons;
    this.legacyIcons = legacyIcons;
    this.previewFrame = previewFrame;
    this.shapeView = shapeView;
    this.shapelessIcons = shapelessIcons;
    this.whiteIcons = whiteIcons;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentIconCustomizationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentIconCustomizationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_icon_customization, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentIconCustomizationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.adaptive_icons;
      View adaptiveIcons = ViewBindings.findChildViewById(rootView, id);
      if (adaptiveIcons == null) {
        break missingId;
      }
      CustomIconAdaptiveBinding binding_adaptiveIcons = CustomIconAdaptiveBinding.bind(adaptiveIcons);

      id = R.id.colored_icons;
      View coloredIcons = ViewBindings.findChildViewById(rootView, id);
      if (coloredIcons == null) {
        break missingId;
      }
      CustomIconColoredBinding binding_coloredIcons = CustomIconColoredBinding.bind(coloredIcons);

      id = R.id.legacy_icons;
      View legacyIcons = ViewBindings.findChildViewById(rootView, id);
      if (legacyIcons == null) {
        break missingId;
      }
      CustomIconLegacyBinding binding_legacyIcons = CustomIconLegacyBinding.bind(legacyIcons);

      id = R.id.preview_frame;
      View previewFrame = ViewBindings.findChildViewById(rootView, id);
      if (previewFrame == null) {
        break missingId;
      }
      DesktopPreviewBinding binding_previewFrame = DesktopPreviewBinding.bind(previewFrame);

      id = R.id.shape_view;
      RecyclerView shapeView = ViewBindings.findChildViewById(rootView, id);
      if (shapeView == null) {
        break missingId;
      }

      id = R.id.shapeless_icons;
      View shapelessIcons = ViewBindings.findChildViewById(rootView, id);
      if (shapelessIcons == null) {
        break missingId;
      }
      CustomIconShapelessBinding binding_shapelessIcons = CustomIconShapelessBinding.bind(shapelessIcons);

      id = R.id.white_icons;
      View whiteIcons = ViewBindings.findChildViewById(rootView, id);
      if (whiteIcons == null) {
        break missingId;
      }
      CustomIconWhiteBinding binding_whiteIcons = CustomIconWhiteBinding.bind(whiteIcons);

      return new FragmentIconCustomizationBinding((LinearLayout) rootView, binding_adaptiveIcons,
          binding_coloredIcons, binding_legacyIcons, binding_previewFrame, shapeView,
          binding_shapelessIcons, binding_whiteIcons);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
