// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: launcher_log.proto

package com.android.launcher3.userevent;

public final class LauncherLogProto {
  private LauncherLogProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * Used to define what type of item a Target would represent.
   * </pre>
   *
   * Protobuf enum {@code userevent.ItemType}
   */
  public enum ItemType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEFAULT_ITEMTYPE = 0;</code>
     */
    DEFAULT_ITEMTYPE(0),
    /**
     * <code>APP_ICON = 1;</code>
     */
    APP_ICON(1),
    /**
     * <code>SHORTCUT = 2;</code>
     */
    SHORTCUT(2),
    /**
     * <code>WIDGET = 3;</code>
     */
    WIDGET(3),
    /**
     * <code>FOLDER_ICON = 4;</code>
     */
    FOLDER_ICON(4),
    /**
     * <code>DEEPSHORTCUT = 5;</code>
     */
    DEEPSHORTCUT(5),
    /**
     * <code>SEARCHBOX = 6;</code>
     */
    SEARCHBOX(6),
    /**
     * <code>EDITTEXT = 7;</code>
     */
    EDITTEXT(7),
    /**
     * <code>NOTIFICATION = 8;</code>
     */
    NOTIFICATION(8),
    /**
     * <pre>
     * Each page of Recents UI (QuickStep)
     * </pre>
     *
     * <code>TASK = 9;</code>
     */
    TASK(9),
    /**
     * <code>WEB_APP = 10;</code>
     */
    WEB_APP(10),
    /**
     * <code>TASK_ICON = 11;</code>
     */
    TASK_ICON(11),
    ;

    /**
     * <code>DEFAULT_ITEMTYPE = 0;</code>
     */
    public static final int DEFAULT_ITEMTYPE_VALUE = 0;
    /**
     * <code>APP_ICON = 1;</code>
     */
    public static final int APP_ICON_VALUE = 1;
    /**
     * <code>SHORTCUT = 2;</code>
     */
    public static final int SHORTCUT_VALUE = 2;
    /**
     * <code>WIDGET = 3;</code>
     */
    public static final int WIDGET_VALUE = 3;
    /**
     * <code>FOLDER_ICON = 4;</code>
     */
    public static final int FOLDER_ICON_VALUE = 4;
    /**
     * <code>DEEPSHORTCUT = 5;</code>
     */
    public static final int DEEPSHORTCUT_VALUE = 5;
    /**
     * <code>SEARCHBOX = 6;</code>
     */
    public static final int SEARCHBOX_VALUE = 6;
    /**
     * <code>EDITTEXT = 7;</code>
     */
    public static final int EDITTEXT_VALUE = 7;
    /**
     * <code>NOTIFICATION = 8;</code>
     */
    public static final int NOTIFICATION_VALUE = 8;
    /**
     * <pre>
     * Each page of Recents UI (QuickStep)
     * </pre>
     *
     * <code>TASK = 9;</code>
     */
    public static final int TASK_VALUE = 9;
    /**
     * <code>WEB_APP = 10;</code>
     */
    public static final int WEB_APP_VALUE = 10;
    /**
     * <code>TASK_ICON = 11;</code>
     */
    public static final int TASK_ICON_VALUE = 11;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ItemType valueOf(int value) {
      return forNumber(value);
    }

    public static ItemType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_ITEMTYPE;
        case 1: return APP_ICON;
        case 2: return SHORTCUT;
        case 3: return WIDGET;
        case 4: return FOLDER_ICON;
        case 5: return DEEPSHORTCUT;
        case 6: return SEARCHBOX;
        case 7: return EDITTEXT;
        case 8: return NOTIFICATION;
        case 9: return TASK;
        case 10: return WEB_APP;
        case 11: return TASK_ICON;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ItemType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ItemType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ItemType>() {
            public ItemType findValueByNumber(int number) {
              return ItemType.forNumber(number);
            }
          };

    private final int value;

    private ItemType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:userevent.ItemType)
  }

  /**
   * <pre>
   * Used to define what type of container a Target would represent.
   * </pre>
   *
   * Protobuf enum {@code userevent.ContainerType}
   */
  public enum ContainerType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEFAULT_CONTAINERTYPE = 0;</code>
     */
    DEFAULT_CONTAINERTYPE(0),
    /**
     * <code>WORKSPACE = 1;</code>
     */
    WORKSPACE(1),
    /**
     * <code>HOTSEAT = 2;</code>
     */
    HOTSEAT(2),
    /**
     * <code>FOLDER = 3;</code>
     */
    FOLDER(3),
    /**
     * <code>ALLAPPS = 4;</code>
     */
    ALLAPPS(4),
    /**
     * <code>WIDGETS = 5;</code>
     */
    WIDGETS(5),
    /**
     * <pre>
     * Zoomed out workspace (without QuickStep)
     * </pre>
     *
     * <code>OVERVIEW = 6;</code>
     */
    OVERVIEW(6),
    /**
     * <code>PREDICTION = 7;</code>
     */
    PREDICTION(7),
    /**
     * <code>SEARCHRESULT = 8;</code>
     */
    SEARCHRESULT(8),
    /**
     * <code>DEEPSHORTCUTS = 9;</code>
     */
    DEEPSHORTCUTS(9),
    /**
     * <pre>
     * confirmation screen
     * </pre>
     *
     * <code>PINITEM = 10;</code>
     */
    PINITEM(10),
    /**
     * <code>NAVBAR = 11;</code>
     */
    NAVBAR(11),
    /**
     * <pre>
     * Recents UI Container (QuickStep)
     * </pre>
     *
     * <code>TASKSWITCHER = 12;</code>
     */
    TASKSWITCHER(12),
    /**
     * <pre>
     * Foreground activity is another app (QuickStep)
     * </pre>
     *
     * <code>APP = 13;</code>
     */
    APP(13),
    /**
     * <pre>
     * Onboarding texts (QuickStep)
     * </pre>
     *
     * <code>TIP = 14;</code>
     */
    TIP(14),
    /**
     * <code>OTHER_LAUNCHER_APP = 15;</code>
     */
    OTHER_LAUNCHER_APP(15),
    ;

    /**
     * <code>DEFAULT_CONTAINERTYPE = 0;</code>
     */
    public static final int DEFAULT_CONTAINERTYPE_VALUE = 0;
    /**
     * <code>WORKSPACE = 1;</code>
     */
    public static final int WORKSPACE_VALUE = 1;
    /**
     * <code>HOTSEAT = 2;</code>
     */
    public static final int HOTSEAT_VALUE = 2;
    /**
     * <code>FOLDER = 3;</code>
     */
    public static final int FOLDER_VALUE = 3;
    /**
     * <code>ALLAPPS = 4;</code>
     */
    public static final int ALLAPPS_VALUE = 4;
    /**
     * <code>WIDGETS = 5;</code>
     */
    public static final int WIDGETS_VALUE = 5;
    /**
     * <pre>
     * Zoomed out workspace (without QuickStep)
     * </pre>
     *
     * <code>OVERVIEW = 6;</code>
     */
    public static final int OVERVIEW_VALUE = 6;
    /**
     * <code>PREDICTION = 7;</code>
     */
    public static final int PREDICTION_VALUE = 7;
    /**
     * <code>SEARCHRESULT = 8;</code>
     */
    public static final int SEARCHRESULT_VALUE = 8;
    /**
     * <code>DEEPSHORTCUTS = 9;</code>
     */
    public static final int DEEPSHORTCUTS_VALUE = 9;
    /**
     * <pre>
     * confirmation screen
     * </pre>
     *
     * <code>PINITEM = 10;</code>
     */
    public static final int PINITEM_VALUE = 10;
    /**
     * <code>NAVBAR = 11;</code>
     */
    public static final int NAVBAR_VALUE = 11;
    /**
     * <pre>
     * Recents UI Container (QuickStep)
     * </pre>
     *
     * <code>TASKSWITCHER = 12;</code>
     */
    public static final int TASKSWITCHER_VALUE = 12;
    /**
     * <pre>
     * Foreground activity is another app (QuickStep)
     * </pre>
     *
     * <code>APP = 13;</code>
     */
    public static final int APP_VALUE = 13;
    /**
     * <pre>
     * Onboarding texts (QuickStep)
     * </pre>
     *
     * <code>TIP = 14;</code>
     */
    public static final int TIP_VALUE = 14;
    /**
     * <code>OTHER_LAUNCHER_APP = 15;</code>
     */
    public static final int OTHER_LAUNCHER_APP_VALUE = 15;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ContainerType valueOf(int value) {
      return forNumber(value);
    }

    public static ContainerType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_CONTAINERTYPE;
        case 1: return WORKSPACE;
        case 2: return HOTSEAT;
        case 3: return FOLDER;
        case 4: return ALLAPPS;
        case 5: return WIDGETS;
        case 6: return OVERVIEW;
        case 7: return PREDICTION;
        case 8: return SEARCHRESULT;
        case 9: return DEEPSHORTCUTS;
        case 10: return PINITEM;
        case 11: return NAVBAR;
        case 12: return TASKSWITCHER;
        case 13: return APP;
        case 14: return TIP;
        case 15: return OTHER_LAUNCHER_APP;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ContainerType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ContainerType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ContainerType>() {
            public ContainerType findValueByNumber(int number) {
              return ContainerType.forNumber(number);
            }
          };

    private final int value;

    private ContainerType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:userevent.ContainerType)
  }

  /**
   * <pre>
   * Used to define what type of control a Target would represent.
   * </pre>
   *
   * Protobuf enum {@code userevent.ControlType}
   */
  public enum ControlType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEFAULT_CONTROLTYPE = 0;</code>
     */
    DEFAULT_CONTROLTYPE(0),
    /**
     * <code>ALL_APPS_BUTTON = 1;</code>
     */
    ALL_APPS_BUTTON(1),
    /**
     * <code>WIDGETS_BUTTON = 2;</code>
     */
    WIDGETS_BUTTON(2),
    /**
     * <code>WALLPAPER_BUTTON = 3;</code>
     */
    WALLPAPER_BUTTON(3),
    /**
     * <code>SETTINGS_BUTTON = 4;</code>
     */
    SETTINGS_BUTTON(4),
    /**
     * <code>REMOVE_TARGET = 5;</code>
     */
    REMOVE_TARGET(5),
    /**
     * <code>UNINSTALL_TARGET = 6;</code>
     */
    UNINSTALL_TARGET(6),
    /**
     * <code>APPINFO_TARGET = 7;</code>
     */
    APPINFO_TARGET(7),
    /**
     * <code>RESIZE_HANDLE = 8;</code>
     */
    RESIZE_HANDLE(8),
    /**
     * <code>VERTICAL_SCROLL = 9;</code>
     */
    VERTICAL_SCROLL(9),
    /**
     * <pre>
     * Deprecated, use enum Command instead
     * </pre>
     *
     * <code>HOME_INTENT = 10;</code>
     */
    HOME_INTENT(10),
    /**
     * <code>BACK_BUTTON = 11;</code>
     */
    BACK_BUTTON(11),
    /**
     * <code>QUICK_SCRUB_BUTTON = 12;</code>
     */
    QUICK_SCRUB_BUTTON(12),
    /**
     * <code>CLEAR_ALL_BUTTON = 13;</code>
     */
    CLEAR_ALL_BUTTON(13),
    /**
     * <code>CANCEL_TARGET = 14;</code>
     */
    CANCEL_TARGET(14),
    /**
     * <code>TASK_PREVIEW = 15;</code>
     */
    TASK_PREVIEW(15),
    /**
     * <code>SPLIT_SCREEN_TARGET = 16;</code>
     */
    SPLIT_SCREEN_TARGET(16),
    /**
     * <code>REMOTE_ACTION_SHORTCUT = 17;</code>
     */
    REMOTE_ACTION_SHORTCUT(17),
    /**
     * <code>APP_USAGE_SETTINGS = 18;</code>
     */
    APP_USAGE_SETTINGS(18),
    /**
     * <code>BACK_GESTURE = 19;</code>
     */
    BACK_GESTURE(19),
    /**
     * <code>UNDO = 20;</code>
     */
    UNDO(20),
    /**
     * <code>DISMISS_PREDICTION = 21;</code>
     */
    DISMISS_PREDICTION(21),
    /**
     * <code>HYBRID_HOTSEAT_ACCEPTED = 22;</code>
     */
    HYBRID_HOTSEAT_ACCEPTED(22),
    /**
     * <code>HYBRID_HOTSEAT_CANCELED = 23;</code>
     */
    HYBRID_HOTSEAT_CANCELED(23),
    /**
     * <code>OVERVIEW_ACTIONS_SHARE_BUTTON = 24;</code>
     */
    OVERVIEW_ACTIONS_SHARE_BUTTON(24),
    /**
     * <code>OVERVIEW_ACTIONS_SCREENSHOT_BUTTON = 25;</code>
     */
    OVERVIEW_ACTIONS_SCREENSHOT_BUTTON(25),
    /**
     * <code>OVERVIEW_ACTIONS_SELECT_BUTTON = 26;</code>
     */
    OVERVIEW_ACTIONS_SELECT_BUTTON(26),
    /**
     * <code>SELECT_MODE_CLOSE_BUTTON = 27;</code>
     */
    SELECT_MODE_CLOSE_BUTTON(27),
    /**
     * <code>SELECT_MODE_ITEM = 28;</code>
     */
    SELECT_MODE_ITEM(28),
    ;

    /**
     * <code>DEFAULT_CONTROLTYPE = 0;</code>
     */
    public static final int DEFAULT_CONTROLTYPE_VALUE = 0;
    /**
     * <code>ALL_APPS_BUTTON = 1;</code>
     */
    public static final int ALL_APPS_BUTTON_VALUE = 1;
    /**
     * <code>WIDGETS_BUTTON = 2;</code>
     */
    public static final int WIDGETS_BUTTON_VALUE = 2;
    /**
     * <code>WALLPAPER_BUTTON = 3;</code>
     */
    public static final int WALLPAPER_BUTTON_VALUE = 3;
    /**
     * <code>SETTINGS_BUTTON = 4;</code>
     */
    public static final int SETTINGS_BUTTON_VALUE = 4;
    /**
     * <code>REMOVE_TARGET = 5;</code>
     */
    public static final int REMOVE_TARGET_VALUE = 5;
    /**
     * <code>UNINSTALL_TARGET = 6;</code>
     */
    public static final int UNINSTALL_TARGET_VALUE = 6;
    /**
     * <code>APPINFO_TARGET = 7;</code>
     */
    public static final int APPINFO_TARGET_VALUE = 7;
    /**
     * <code>RESIZE_HANDLE = 8;</code>
     */
    public static final int RESIZE_HANDLE_VALUE = 8;
    /**
     * <code>VERTICAL_SCROLL = 9;</code>
     */
    public static final int VERTICAL_SCROLL_VALUE = 9;
    /**
     * <pre>
     * Deprecated, use enum Command instead
     * </pre>
     *
     * <code>HOME_INTENT = 10;</code>
     */
    public static final int HOME_INTENT_VALUE = 10;
    /**
     * <code>BACK_BUTTON = 11;</code>
     */
    public static final int BACK_BUTTON_VALUE = 11;
    /**
     * <code>QUICK_SCRUB_BUTTON = 12;</code>
     */
    public static final int QUICK_SCRUB_BUTTON_VALUE = 12;
    /**
     * <code>CLEAR_ALL_BUTTON = 13;</code>
     */
    public static final int CLEAR_ALL_BUTTON_VALUE = 13;
    /**
     * <code>CANCEL_TARGET = 14;</code>
     */
    public static final int CANCEL_TARGET_VALUE = 14;
    /**
     * <code>TASK_PREVIEW = 15;</code>
     */
    public static final int TASK_PREVIEW_VALUE = 15;
    /**
     * <code>SPLIT_SCREEN_TARGET = 16;</code>
     */
    public static final int SPLIT_SCREEN_TARGET_VALUE = 16;
    /**
     * <code>REMOTE_ACTION_SHORTCUT = 17;</code>
     */
    public static final int REMOTE_ACTION_SHORTCUT_VALUE = 17;
    /**
     * <code>APP_USAGE_SETTINGS = 18;</code>
     */
    public static final int APP_USAGE_SETTINGS_VALUE = 18;
    /**
     * <code>BACK_GESTURE = 19;</code>
     */
    public static final int BACK_GESTURE_VALUE = 19;
    /**
     * <code>UNDO = 20;</code>
     */
    public static final int UNDO_VALUE = 20;
    /**
     * <code>DISMISS_PREDICTION = 21;</code>
     */
    public static final int DISMISS_PREDICTION_VALUE = 21;
    /**
     * <code>HYBRID_HOTSEAT_ACCEPTED = 22;</code>
     */
    public static final int HYBRID_HOTSEAT_ACCEPTED_VALUE = 22;
    /**
     * <code>HYBRID_HOTSEAT_CANCELED = 23;</code>
     */
    public static final int HYBRID_HOTSEAT_CANCELED_VALUE = 23;
    /**
     * <code>OVERVIEW_ACTIONS_SHARE_BUTTON = 24;</code>
     */
    public static final int OVERVIEW_ACTIONS_SHARE_BUTTON_VALUE = 24;
    /**
     * <code>OVERVIEW_ACTIONS_SCREENSHOT_BUTTON = 25;</code>
     */
    public static final int OVERVIEW_ACTIONS_SCREENSHOT_BUTTON_VALUE = 25;
    /**
     * <code>OVERVIEW_ACTIONS_SELECT_BUTTON = 26;</code>
     */
    public static final int OVERVIEW_ACTIONS_SELECT_BUTTON_VALUE = 26;
    /**
     * <code>SELECT_MODE_CLOSE_BUTTON = 27;</code>
     */
    public static final int SELECT_MODE_CLOSE_BUTTON_VALUE = 27;
    /**
     * <code>SELECT_MODE_ITEM = 28;</code>
     */
    public static final int SELECT_MODE_ITEM_VALUE = 28;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ControlType valueOf(int value) {
      return forNumber(value);
    }

    public static ControlType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_CONTROLTYPE;
        case 1: return ALL_APPS_BUTTON;
        case 2: return WIDGETS_BUTTON;
        case 3: return WALLPAPER_BUTTON;
        case 4: return SETTINGS_BUTTON;
        case 5: return REMOVE_TARGET;
        case 6: return UNINSTALL_TARGET;
        case 7: return APPINFO_TARGET;
        case 8: return RESIZE_HANDLE;
        case 9: return VERTICAL_SCROLL;
        case 10: return HOME_INTENT;
        case 11: return BACK_BUTTON;
        case 12: return QUICK_SCRUB_BUTTON;
        case 13: return CLEAR_ALL_BUTTON;
        case 14: return CANCEL_TARGET;
        case 15: return TASK_PREVIEW;
        case 16: return SPLIT_SCREEN_TARGET;
        case 17: return REMOTE_ACTION_SHORTCUT;
        case 18: return APP_USAGE_SETTINGS;
        case 19: return BACK_GESTURE;
        case 20: return UNDO;
        case 21: return DISMISS_PREDICTION;
        case 22: return HYBRID_HOTSEAT_ACCEPTED;
        case 23: return HYBRID_HOTSEAT_CANCELED;
        case 24: return OVERVIEW_ACTIONS_SHARE_BUTTON;
        case 25: return OVERVIEW_ACTIONS_SCREENSHOT_BUTTON;
        case 26: return OVERVIEW_ACTIONS_SELECT_BUTTON;
        case 27: return SELECT_MODE_CLOSE_BUTTON;
        case 28: return SELECT_MODE_ITEM;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ControlType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ControlType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ControlType>() {
            public ControlType findValueByNumber(int number) {
              return ControlType.forNumber(number);
            }
          };

    private final int value;

    private ControlType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:userevent.ControlType)
  }

  /**
   * Protobuf enum {@code userevent.TipType}
   */
  public enum TipType
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>DEFAULT_NONE = 0;</code>
     */
    DEFAULT_NONE(0),
    /**
     * <code>BOUNCE = 1;</code>
     */
    BOUNCE(1),
    /**
     * <code>SWIPE_UP_TEXT = 2;</code>
     */
    SWIPE_UP_TEXT(2),
    /**
     * <code>QUICK_SCRUB_TEXT = 3;</code>
     */
    QUICK_SCRUB_TEXT(3),
    /**
     * <code>PREDICTION_TEXT = 4;</code>
     */
    PREDICTION_TEXT(4),
    /**
     * <code>DWB_TOAST = 5;</code>
     */
    DWB_TOAST(5),
    /**
     * <code>HYBRID_HOTSEAT = 6;</code>
     */
    HYBRID_HOTSEAT(6),
    ;

    /**
     * <code>DEFAULT_NONE = 0;</code>
     */
    public static final int DEFAULT_NONE_VALUE = 0;
    /**
     * <code>BOUNCE = 1;</code>
     */
    public static final int BOUNCE_VALUE = 1;
    /**
     * <code>SWIPE_UP_TEXT = 2;</code>
     */
    public static final int SWIPE_UP_TEXT_VALUE = 2;
    /**
     * <code>QUICK_SCRUB_TEXT = 3;</code>
     */
    public static final int QUICK_SCRUB_TEXT_VALUE = 3;
    /**
     * <code>PREDICTION_TEXT = 4;</code>
     */
    public static final int PREDICTION_TEXT_VALUE = 4;
    /**
     * <code>DWB_TOAST = 5;</code>
     */
    public static final int DWB_TOAST_VALUE = 5;
    /**
     * <code>HYBRID_HOTSEAT = 6;</code>
     */
    public static final int HYBRID_HOTSEAT_VALUE = 6;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TipType valueOf(int value) {
      return forNumber(value);
    }

    public static TipType forNumber(int value) {
      switch (value) {
        case 0: return DEFAULT_NONE;
        case 1: return BOUNCE;
        case 2: return SWIPE_UP_TEXT;
        case 3: return QUICK_SCRUB_TEXT;
        case 4: return PREDICTION_TEXT;
        case 5: return DWB_TOAST;
        case 6: return HYBRID_HOTSEAT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TipType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TipType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TipType>() {
            public TipType findValueByNumber(int number) {
              return TipType.forNumber(number);
            }
          };

    private final int value;

    private TipType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:userevent.TipType)
  }

  public interface TargetOrBuilder extends
      // @@protoc_insertion_point(interface_extends:userevent.Target)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Target.Type getType();

    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    boolean hasPageIndex();
    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    int getPageIndex();

    /**
     * <code>optional int32 rank = 3;</code>
     */
    boolean hasRank();
    /**
     * <code>optional int32 rank = 3;</code>
     */
    int getRank();

    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    boolean hasGridX();
    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    int getGridX();

    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    boolean hasGridY();
    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    int getGridY();

    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    boolean hasContainerType();
    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.ContainerType getContainerType();

    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    boolean hasCardinality();
    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    int getCardinality();

    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    boolean hasControlType();
    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.ControlType getControlType();

    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    boolean hasItemType();
    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.ItemType getItemType();

    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    boolean hasPackageNameHash();
    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    int getPackageNameHash();

    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    boolean hasComponentHash();
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    int getComponentHash();

    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    boolean hasIntentHash();
    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    int getIntentHash();

    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    boolean hasSpanX();
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    int getSpanX();

    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    boolean hasSpanY();
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    int getSpanY();

    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    boolean hasPredictedRank();
    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    int getPredictedRank();

    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    boolean hasExtension();
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension getExtension();

    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    boolean hasTipType();
    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.TipType getTipType();

    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    boolean hasSearchQueryLength();
    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    int getSearchQueryLength();

    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    boolean hasIsWorkApp();
    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    boolean getIsWorkApp();

    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    boolean hasFromFolderLabelState();
    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState getFromFolderLabelState();

    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    boolean hasToFolderLabelState();
    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState getToFolderLabelState();
  }
  /**
   * Protobuf type {@code userevent.Target}
   */
  public  static final class Target extends
      com.google.protobuf.GeneratedMessageLite<
          Target, Target.Builder> implements
      // @@protoc_insertion_point(message_implements:userevent.Target)
      TargetOrBuilder {
    private Target() {
      spanX_ = 1;
      spanY_ = 1;
    }
    /**
     * Protobuf enum {@code userevent.Target.Type}
     */
    public enum Type
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <code>ITEM = 1;</code>
       */
      ITEM(1),
      /**
       * <code>CONTROL = 2;</code>
       */
      CONTROL(2),
      /**
       * <code>CONTAINER = 3;</code>
       */
      CONTAINER(3),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>ITEM = 1;</code>
       */
      public static final int ITEM_VALUE = 1;
      /**
       * <code>CONTROL = 2;</code>
       */
      public static final int CONTROL_VALUE = 2;
      /**
       * <code>CONTAINER = 3;</code>
       */
      public static final int CONTAINER_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return ITEM;
          case 2: return CONTROL;
          case 3: return CONTAINER;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Target.Type)
    }

    /**
     * <pre>
     * Note: proto does not support duplicate enum values, even if they belong to different enum type.
     * Hence "FROM" and "TO" prefix added.
     * </pre>
     *
     * Protobuf enum {@code userevent.Target.FromFolderLabelState}
     */
    public enum FromFolderLabelState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>FROM_FOLDER_LABEL_STATE_UNSPECIFIED = 0;</code>
       */
      FROM_FOLDER_LABEL_STATE_UNSPECIFIED(0),
      /**
       * <code>FROM_EMPTY = 1;</code>
       */
      FROM_EMPTY(1),
      /**
       * <code>FROM_CUSTOM = 2;</code>
       */
      FROM_CUSTOM(2),
      /**
       * <code>FROM_SUGGESTED = 3;</code>
       */
      FROM_SUGGESTED(3),
      ;

      /**
       * <code>FROM_FOLDER_LABEL_STATE_UNSPECIFIED = 0;</code>
       */
      public static final int FROM_FOLDER_LABEL_STATE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>FROM_EMPTY = 1;</code>
       */
      public static final int FROM_EMPTY_VALUE = 1;
      /**
       * <code>FROM_CUSTOM = 2;</code>
       */
      public static final int FROM_CUSTOM_VALUE = 2;
      /**
       * <code>FROM_SUGGESTED = 3;</code>
       */
      public static final int FROM_SUGGESTED_VALUE = 3;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static FromFolderLabelState valueOf(int value) {
        return forNumber(value);
      }

      public static FromFolderLabelState forNumber(int value) {
        switch (value) {
          case 0: return FROM_FOLDER_LABEL_STATE_UNSPECIFIED;
          case 1: return FROM_EMPTY;
          case 2: return FROM_CUSTOM;
          case 3: return FROM_SUGGESTED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<FromFolderLabelState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          FromFolderLabelState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<FromFolderLabelState>() {
              public FromFolderLabelState findValueByNumber(int number) {
                return FromFolderLabelState.forNumber(number);
              }
            };

      private final int value;

      private FromFolderLabelState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Target.FromFolderLabelState)
    }

    /**
     * Protobuf enum {@code userevent.Target.ToFolderLabelState}
     */
    public enum ToFolderLabelState
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>TO_FOLDER_LABEL_STATE_UNSPECIFIED = 0;</code>
       */
      TO_FOLDER_LABEL_STATE_UNSPECIFIED(0),
      /**
       * <code>TO_SUGGESTION0_WITH_VALID_PRIMARY = 1;</code>
       */
      TO_SUGGESTION0_WITH_VALID_PRIMARY(1),
      /**
       * <code>TO_SUGGESTION1_WITH_VALID_PRIMARY = 2;</code>
       */
      TO_SUGGESTION1_WITH_VALID_PRIMARY(2),
      /**
       * <code>TO_SUGGESTION1_WITH_EMPTY_PRIMARY = 3;</code>
       */
      TO_SUGGESTION1_WITH_EMPTY_PRIMARY(3),
      /**
       * <code>TO_SUGGESTION2_WITH_VALID_PRIMARY = 4;</code>
       */
      TO_SUGGESTION2_WITH_VALID_PRIMARY(4),
      /**
       * <code>TO_SUGGESTION2_WITH_EMPTY_PRIMARY = 5;</code>
       */
      TO_SUGGESTION2_WITH_EMPTY_PRIMARY(5),
      /**
       * <code>TO_SUGGESTION3_WITH_VALID_PRIMARY = 6;</code>
       */
      TO_SUGGESTION3_WITH_VALID_PRIMARY(6),
      /**
       * <code>TO_SUGGESTION3_WITH_EMPTY_PRIMARY = 7;</code>
       */
      TO_SUGGESTION3_WITH_EMPTY_PRIMARY(7),
      /**
       * <code>TO_EMPTY_WITH_VALID_SUGGESTIONS = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated
      TO_EMPTY_WITH_VALID_SUGGESTIONS(8),
      /**
       * <code>TO_EMPTY_WITH_VALID_PRIMARY = 15;</code>
       */
      TO_EMPTY_WITH_VALID_PRIMARY(15),
      /**
       * <code>TO_EMPTY_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY = 16;</code>
       */
      TO_EMPTY_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY(16),
      /**
       * <code>TO_EMPTY_WITH_EMPTY_SUGGESTIONS = 9;</code>
       */
      TO_EMPTY_WITH_EMPTY_SUGGESTIONS(9),
      /**
       * <code>TO_EMPTY_WITH_SUGGESTIONS_DISABLED = 10;</code>
       */
      TO_EMPTY_WITH_SUGGESTIONS_DISABLED(10),
      /**
       * <code>TO_CUSTOM_WITH_VALID_SUGGESTIONS = 11 [deprecated = true];</code>
       */
      @java.lang.Deprecated
      TO_CUSTOM_WITH_VALID_SUGGESTIONS(11),
      /**
       * <code>TO_CUSTOM_WITH_VALID_PRIMARY = 17;</code>
       */
      TO_CUSTOM_WITH_VALID_PRIMARY(17),
      /**
       * <code>TO_CUSTOM_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY = 18;</code>
       */
      TO_CUSTOM_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY(18),
      /**
       * <code>TO_CUSTOM_WITH_EMPTY_SUGGESTIONS = 12;</code>
       */
      TO_CUSTOM_WITH_EMPTY_SUGGESTIONS(12),
      /**
       * <code>TO_CUSTOM_WITH_SUGGESTIONS_DISABLED = 13;</code>
       */
      TO_CUSTOM_WITH_SUGGESTIONS_DISABLED(13),
      /**
       * <code>UNCHANGED = 14;</code>
       */
      UNCHANGED(14),
      ;

      /**
       * <code>TO_FOLDER_LABEL_STATE_UNSPECIFIED = 0;</code>
       */
      public static final int TO_FOLDER_LABEL_STATE_UNSPECIFIED_VALUE = 0;
      /**
       * <code>TO_SUGGESTION0_WITH_VALID_PRIMARY = 1;</code>
       */
      public static final int TO_SUGGESTION0_WITH_VALID_PRIMARY_VALUE = 1;
      /**
       * <code>TO_SUGGESTION1_WITH_VALID_PRIMARY = 2;</code>
       */
      public static final int TO_SUGGESTION1_WITH_VALID_PRIMARY_VALUE = 2;
      /**
       * <code>TO_SUGGESTION1_WITH_EMPTY_PRIMARY = 3;</code>
       */
      public static final int TO_SUGGESTION1_WITH_EMPTY_PRIMARY_VALUE = 3;
      /**
       * <code>TO_SUGGESTION2_WITH_VALID_PRIMARY = 4;</code>
       */
      public static final int TO_SUGGESTION2_WITH_VALID_PRIMARY_VALUE = 4;
      /**
       * <code>TO_SUGGESTION2_WITH_EMPTY_PRIMARY = 5;</code>
       */
      public static final int TO_SUGGESTION2_WITH_EMPTY_PRIMARY_VALUE = 5;
      /**
       * <code>TO_SUGGESTION3_WITH_VALID_PRIMARY = 6;</code>
       */
      public static final int TO_SUGGESTION3_WITH_VALID_PRIMARY_VALUE = 6;
      /**
       * <code>TO_SUGGESTION3_WITH_EMPTY_PRIMARY = 7;</code>
       */
      public static final int TO_SUGGESTION3_WITH_EMPTY_PRIMARY_VALUE = 7;
      /**
       * <code>TO_EMPTY_WITH_VALID_SUGGESTIONS = 8 [deprecated = true];</code>
       */
      public static final int TO_EMPTY_WITH_VALID_SUGGESTIONS_VALUE = 8;
      /**
       * <code>TO_EMPTY_WITH_VALID_PRIMARY = 15;</code>
       */
      public static final int TO_EMPTY_WITH_VALID_PRIMARY_VALUE = 15;
      /**
       * <code>TO_EMPTY_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY = 16;</code>
       */
      public static final int TO_EMPTY_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY_VALUE = 16;
      /**
       * <code>TO_EMPTY_WITH_EMPTY_SUGGESTIONS = 9;</code>
       */
      public static final int TO_EMPTY_WITH_EMPTY_SUGGESTIONS_VALUE = 9;
      /**
       * <code>TO_EMPTY_WITH_SUGGESTIONS_DISABLED = 10;</code>
       */
      public static final int TO_EMPTY_WITH_SUGGESTIONS_DISABLED_VALUE = 10;
      /**
       * <code>TO_CUSTOM_WITH_VALID_SUGGESTIONS = 11 [deprecated = true];</code>
       */
      public static final int TO_CUSTOM_WITH_VALID_SUGGESTIONS_VALUE = 11;
      /**
       * <code>TO_CUSTOM_WITH_VALID_PRIMARY = 17;</code>
       */
      public static final int TO_CUSTOM_WITH_VALID_PRIMARY_VALUE = 17;
      /**
       * <code>TO_CUSTOM_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY = 18;</code>
       */
      public static final int TO_CUSTOM_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY_VALUE = 18;
      /**
       * <code>TO_CUSTOM_WITH_EMPTY_SUGGESTIONS = 12;</code>
       */
      public static final int TO_CUSTOM_WITH_EMPTY_SUGGESTIONS_VALUE = 12;
      /**
       * <code>TO_CUSTOM_WITH_SUGGESTIONS_DISABLED = 13;</code>
       */
      public static final int TO_CUSTOM_WITH_SUGGESTIONS_DISABLED_VALUE = 13;
      /**
       * <code>UNCHANGED = 14;</code>
       */
      public static final int UNCHANGED_VALUE = 14;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ToFolderLabelState valueOf(int value) {
        return forNumber(value);
      }

      public static ToFolderLabelState forNumber(int value) {
        switch (value) {
          case 0: return TO_FOLDER_LABEL_STATE_UNSPECIFIED;
          case 1: return TO_SUGGESTION0_WITH_VALID_PRIMARY;
          case 2: return TO_SUGGESTION1_WITH_VALID_PRIMARY;
          case 3: return TO_SUGGESTION1_WITH_EMPTY_PRIMARY;
          case 4: return TO_SUGGESTION2_WITH_VALID_PRIMARY;
          case 5: return TO_SUGGESTION2_WITH_EMPTY_PRIMARY;
          case 6: return TO_SUGGESTION3_WITH_VALID_PRIMARY;
          case 7: return TO_SUGGESTION3_WITH_EMPTY_PRIMARY;
          case 8: return TO_EMPTY_WITH_VALID_SUGGESTIONS;
          case 15: return TO_EMPTY_WITH_VALID_PRIMARY;
          case 16: return TO_EMPTY_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY;
          case 9: return TO_EMPTY_WITH_EMPTY_SUGGESTIONS;
          case 10: return TO_EMPTY_WITH_SUGGESTIONS_DISABLED;
          case 11: return TO_CUSTOM_WITH_VALID_SUGGESTIONS;
          case 17: return TO_CUSTOM_WITH_VALID_PRIMARY;
          case 18: return TO_CUSTOM_WITH_VALID_SUGGESTIONS_AND_EMPTY_PRIMARY;
          case 12: return TO_CUSTOM_WITH_EMPTY_SUGGESTIONS;
          case 13: return TO_CUSTOM_WITH_SUGGESTIONS_DISABLED;
          case 14: return UNCHANGED;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ToFolderLabelState>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ToFolderLabelState> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ToFolderLabelState>() {
              public ToFolderLabelState findValueByNumber(int number) {
                return ToFolderLabelState.forNumber(number);
              }
            };

      private final int value;

      private ToFolderLabelState(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Target.ToFolderLabelState)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Target.Type getType() {
      com.android.launcher3.userevent.LauncherLogProto.Target.Type result = com.android.launcher3.userevent.LauncherLogProto.Target.Type.forNumber(type_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Target.Type.NONE : result;
    }
    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    private void setType(com.android.launcher3.userevent.LauncherLogProto.Target.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Target.Type type = 1;</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
    }

    public static final int PAGE_INDEX_FIELD_NUMBER = 2;
    private int pageIndex_;
    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    public boolean hasPageIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    public int getPageIndex() {
      return pageIndex_;
    }
    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    private void setPageIndex(int value) {
      bitField0_ |= 0x00000002;
      pageIndex_ = value;
    }
    /**
     * <pre>
     * For container type and item type
     * Used mainly for ContainerType.FOLDER, ItemType.*
     * </pre>
     *
     * <code>optional int32 page_index = 2;</code>
     */
    private void clearPageIndex() {
      bitField0_ = (bitField0_ & ~0x00000002);
      pageIndex_ = 0;
    }

    public static final int RANK_FIELD_NUMBER = 3;
    private int rank_;
    /**
     * <code>optional int32 rank = 3;</code>
     */
    public boolean hasRank() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 rank = 3;</code>
     */
    public int getRank() {
      return rank_;
    }
    /**
     * <code>optional int32 rank = 3;</code>
     */
    private void setRank(int value) {
      bitField0_ |= 0x00000004;
      rank_ = value;
    }
    /**
     * <code>optional int32 rank = 3;</code>
     */
    private void clearRank() {
      bitField0_ = (bitField0_ & ~0x00000004);
      rank_ = 0;
    }

    public static final int GRID_X_FIELD_NUMBER = 4;
    private int gridX_;
    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    public boolean hasGridX() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    public int getGridX() {
      return gridX_;
    }
    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    private void setGridX(int value) {
      bitField0_ |= 0x00000008;
      gridX_ = value;
    }
    /**
     * <code>optional int32 grid_x = 4;</code>
     */
    private void clearGridX() {
      bitField0_ = (bitField0_ & ~0x00000008);
      gridX_ = 0;
    }

    public static final int GRID_Y_FIELD_NUMBER = 5;
    private int gridY_;
    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    public boolean hasGridY() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    public int getGridY() {
      return gridY_;
    }
    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    private void setGridY(int value) {
      bitField0_ |= 0x00000010;
      gridY_ = value;
    }
    /**
     * <code>optional int32 grid_y = 5;</code>
     */
    private void clearGridY() {
      bitField0_ = (bitField0_ & ~0x00000010);
      gridY_ = 0;
    }

    public static final int CONTAINER_TYPE_FIELD_NUMBER = 6;
    private int containerType_;
    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    public boolean hasContainerType() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.ContainerType getContainerType() {
      com.android.launcher3.userevent.LauncherLogProto.ContainerType result = com.android.launcher3.userevent.LauncherLogProto.ContainerType.forNumber(containerType_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.ContainerType.DEFAULT_CONTAINERTYPE : result;
    }
    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    private void setContainerType(com.android.launcher3.userevent.LauncherLogProto.ContainerType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000020;
      containerType_ = value.getNumber();
    }
    /**
     * <pre>
     * For container types only
     * </pre>
     *
     * <code>optional .userevent.ContainerType container_type = 6;</code>
     */
    private void clearContainerType() {
      bitField0_ = (bitField0_ & ~0x00000020);
      containerType_ = 0;
    }

    public static final int CARDINALITY_FIELD_NUMBER = 7;
    private int cardinality_;
    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    public boolean hasCardinality() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    public int getCardinality() {
      return cardinality_;
    }
    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    private void setCardinality(int value) {
      bitField0_ |= 0x00000040;
      cardinality_ = value;
    }
    /**
     * <code>optional int32 cardinality = 7;</code>
     */
    private void clearCardinality() {
      bitField0_ = (bitField0_ & ~0x00000040);
      cardinality_ = 0;
    }

    public static final int CONTROL_TYPE_FIELD_NUMBER = 8;
    private int controlType_;
    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    public boolean hasControlType() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.ControlType getControlType() {
      com.android.launcher3.userevent.LauncherLogProto.ControlType result = com.android.launcher3.userevent.LauncherLogProto.ControlType.forNumber(controlType_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.ControlType.DEFAULT_CONTROLTYPE : result;
    }
    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    private void setControlType(com.android.launcher3.userevent.LauncherLogProto.ControlType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000080;
      controlType_ = value.getNumber();
    }
    /**
     * <pre>
     * For control types only
     * </pre>
     *
     * <code>optional .userevent.ControlType control_type = 8;</code>
     */
    private void clearControlType() {
      bitField0_ = (bitField0_ & ~0x00000080);
      controlType_ = 0;
    }

    public static final int ITEM_TYPE_FIELD_NUMBER = 9;
    private int itemType_;
    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    public boolean hasItemType() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.ItemType getItemType() {
      com.android.launcher3.userevent.LauncherLogProto.ItemType result = com.android.launcher3.userevent.LauncherLogProto.ItemType.forNumber(itemType_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.ItemType.DEFAULT_ITEMTYPE : result;
    }
    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    private void setItemType(com.android.launcher3.userevent.LauncherLogProto.ItemType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000100;
      itemType_ = value.getNumber();
    }
    /**
     * <pre>
     * For item types only
     * </pre>
     *
     * <code>optional .userevent.ItemType item_type = 9;</code>
     */
    private void clearItemType() {
      bitField0_ = (bitField0_ & ~0x00000100);
      itemType_ = 0;
    }

    public static final int PACKAGE_NAME_HASH_FIELD_NUMBER = 10;
    private int packageNameHash_;
    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    public boolean hasPackageNameHash() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    public int getPackageNameHash() {
      return packageNameHash_;
    }
    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    private void setPackageNameHash(int value) {
      bitField0_ |= 0x00000200;
      packageNameHash_ = value;
    }
    /**
     * <code>optional int32 package_name_hash = 10;</code>
     */
    private void clearPackageNameHash() {
      bitField0_ = (bitField0_ & ~0x00000200);
      packageNameHash_ = 0;
    }

    public static final int COMPONENT_HASH_FIELD_NUMBER = 11;
    private int componentHash_;
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    public boolean hasComponentHash() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    public int getComponentHash() {
      return componentHash_;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    private void setComponentHash(int value) {
      bitField0_ |= 0x00000400;
      componentHash_ = value;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 component_hash = 11;</code>
     */
    private void clearComponentHash() {
      bitField0_ = (bitField0_ & ~0x00000400);
      componentHash_ = 0;
    }

    public static final int INTENT_HASH_FIELD_NUMBER = 12;
    private int intentHash_;
    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    public boolean hasIntentHash() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    public int getIntentHash() {
      return intentHash_;
    }
    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    private void setIntentHash(int value) {
      bitField0_ |= 0x00000800;
      intentHash_ = value;
    }
    /**
     * <pre>
     * Used for ItemType.SHORTCUT
     * </pre>
     *
     * <code>optional int32 intent_hash = 12;</code>
     */
    private void clearIntentHash() {
      bitField0_ = (bitField0_ & ~0x00000800);
      intentHash_ = 0;
    }

    public static final int SPAN_X_FIELD_NUMBER = 13;
    private int spanX_;
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    public boolean hasSpanX() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    public int getSpanX() {
      return spanX_;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    private void setSpanX(int value) {
      bitField0_ |= 0x00001000;
      spanX_ = value;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_x = 13 [default = 1];</code>
     */
    private void clearSpanX() {
      bitField0_ = (bitField0_ & ~0x00001000);
      spanX_ = 1;
    }

    public static final int SPAN_Y_FIELD_NUMBER = 14;
    private int spanY_;
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    public boolean hasSpanY() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    public int getSpanY() {
      return spanY_;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    private void setSpanY(int value) {
      bitField0_ |= 0x00002000;
      spanY_ = value;
    }
    /**
     * <pre>
     * Used for ItemType.WIDGET
     * </pre>
     *
     * <code>optional int32 span_y = 14 [default = 1];</code>
     */
    private void clearSpanY() {
      bitField0_ = (bitField0_ & ~0x00002000);
      spanY_ = 1;
    }

    public static final int PREDICTEDRANK_FIELD_NUMBER = 15;
    private int predictedRank_;
    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    public boolean hasPredictedRank() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    public int getPredictedRank() {
      return predictedRank_;
    }
    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    private void setPredictedRank(int value) {
      bitField0_ |= 0x00004000;
      predictedRank_ = value;
    }
    /**
     * <code>optional int32 predictedRank = 15;</code>
     */
    private void clearPredictedRank() {
      bitField0_ = (bitField0_ & ~0x00004000);
      predictedRank_ = 0;
    }

    public static final int EXTENSION_FIELD_NUMBER = 16;
    private com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension extension_;
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    public boolean hasExtension() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    public com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension getExtension() {
      return extension_ == null ? com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.getDefaultInstance() : extension_;
    }
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    private void setExtension(com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension value) {
      if (value == null) {
        throw new NullPointerException();
      }
      extension_ = value;
      bitField0_ |= 0x00008000;
      }
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    private void setExtension(
        com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.Builder builderForValue) {
      extension_ = builderForValue.build();
      bitField0_ |= 0x00008000;
    }
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    private void mergeExtension(com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension value) {
      if (extension_ != null &&
          extension_ != com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.getDefaultInstance()) {
        extension_ =
          com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.newBuilder(extension_).mergeFrom(value).buildPartial();
      } else {
        extension_ = value;
      }
      bitField0_ |= 0x00008000;
    }
    /**
     * <code>optional .userevent.TargetExtension extension = 16;</code>
     */
    private void clearExtension() {  extension_ = null;
      bitField0_ = (bitField0_ & ~0x00008000);
    }

    public static final int TIP_TYPE_FIELD_NUMBER = 17;
    private int tipType_;
    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    public boolean hasTipType() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.TipType getTipType() {
      com.android.launcher3.userevent.LauncherLogProto.TipType result = com.android.launcher3.userevent.LauncherLogProto.TipType.forNumber(tipType_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.TipType.DEFAULT_NONE : result;
    }
    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    private void setTipType(com.android.launcher3.userevent.LauncherLogProto.TipType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00010000;
      tipType_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.TipType tip_type = 17;</code>
     */
    private void clearTipType() {
      bitField0_ = (bitField0_ & ~0x00010000);
      tipType_ = 0;
    }

    public static final int SEARCH_QUERY_LENGTH_FIELD_NUMBER = 18;
    private int searchQueryLength_;
    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    public boolean hasSearchQueryLength() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    public int getSearchQueryLength() {
      return searchQueryLength_;
    }
    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    private void setSearchQueryLength(int value) {
      bitField0_ |= 0x00020000;
      searchQueryLength_ = value;
    }
    /**
     * <code>optional int32 search_query_length = 18;</code>
     */
    private void clearSearchQueryLength() {
      bitField0_ = (bitField0_ & ~0x00020000);
      searchQueryLength_ = 0;
    }

    public static final int IS_WORK_APP_FIELD_NUMBER = 19;
    private boolean isWorkApp_;
    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    public boolean hasIsWorkApp() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    public boolean getIsWorkApp() {
      return isWorkApp_;
    }
    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    private void setIsWorkApp(boolean value) {
      bitField0_ |= 0x00040000;
      isWorkApp_ = value;
    }
    /**
     * <code>optional bool is_work_app = 19;</code>
     */
    private void clearIsWorkApp() {
      bitField0_ = (bitField0_ & ~0x00040000);
      isWorkApp_ = false;
    }

    public static final int FROM_FOLDER_LABEL_STATE_FIELD_NUMBER = 20;
    private int fromFolderLabelState_;
    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    public boolean hasFromFolderLabelState() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState getFromFolderLabelState() {
      com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState result = com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState.forNumber(fromFolderLabelState_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState.FROM_FOLDER_LABEL_STATE_UNSPECIFIED : result;
    }
    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    private void setFromFolderLabelState(com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00080000;
      fromFolderLabelState_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
     */
    private void clearFromFolderLabelState() {
      bitField0_ = (bitField0_ & ~0x00080000);
      fromFolderLabelState_ = 0;
    }

    public static final int TO_FOLDER_LABEL_STATE_FIELD_NUMBER = 21;
    private int toFolderLabelState_;
    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    public boolean hasToFolderLabelState() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState getToFolderLabelState() {
      com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState result = com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState.forNumber(toFolderLabelState_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState.TO_FOLDER_LABEL_STATE_UNSPECIFIED : result;
    }
    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    private void setToFolderLabelState(com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00100000;
      toFolderLabelState_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
     */
    private void clearToFolderLabelState() {
      bitField0_ = (bitField0_ & ~0x00100000);
      toFolderLabelState_ = 0;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, pageIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, rank_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, gridX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, gridY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeEnum(6, containerType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, cardinality_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeEnum(8, controlType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeEnum(9, itemType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, packageNameHash_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, componentHash_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, intentHash_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeInt32(13, spanX_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeInt32(14, spanY_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(15, predictedRank_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeMessage(16, getExtension());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeEnum(17, tipType_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(18, searchQueryLength_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeBool(19, isWorkApp_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeEnum(20, fromFolderLabelState_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeEnum(21, toFolderLabelState_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, pageIndex_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, rank_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gridX_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, gridY_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, containerType_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, cardinality_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, controlType_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, itemType_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, packageNameHash_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, componentHash_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, intentHash_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, spanX_);
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, spanY_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(15, predictedRank_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, getExtension());
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(17, tipType_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(18, searchQueryLength_);
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(19, isWorkApp_);
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(20, fromFolderLabelState_);
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(21, toFolderLabelState_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Target parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.launcher3.userevent.LauncherLogProto.Target prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code userevent.Target}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.launcher3.userevent.LauncherLogProto.Target, Builder> implements
        // @@protoc_insertion_point(builder_implements:userevent.Target)
        com.android.launcher3.userevent.LauncherLogProto.TargetOrBuilder {
      // Construct using com.android.launcher3.userevent.LauncherLogProto.Target.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .userevent.Target.Type type = 1;</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>optional .userevent.Target.Type type = 1;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Target.Type getType() {
        return instance.getType();
      }
      /**
       * <code>optional .userevent.Target.Type type = 1;</code>
       */
      public Builder setType(com.android.launcher3.userevent.LauncherLogProto.Target.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>optional .userevent.Target.Type type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * For container type and item type
       * Used mainly for ContainerType.FOLDER, ItemType.*
       * </pre>
       *
       * <code>optional int32 page_index = 2;</code>
       */
      public boolean hasPageIndex() {
        return instance.hasPageIndex();
      }
      /**
       * <pre>
       * For container type and item type
       * Used mainly for ContainerType.FOLDER, ItemType.*
       * </pre>
       *
       * <code>optional int32 page_index = 2;</code>
       */
      public int getPageIndex() {
        return instance.getPageIndex();
      }
      /**
       * <pre>
       * For container type and item type
       * Used mainly for ContainerType.FOLDER, ItemType.*
       * </pre>
       *
       * <code>optional int32 page_index = 2;</code>
       */
      public Builder setPageIndex(int value) {
        copyOnWrite();
        instance.setPageIndex(value);
        return this;
      }
      /**
       * <pre>
       * For container type and item type
       * Used mainly for ContainerType.FOLDER, ItemType.*
       * </pre>
       *
       * <code>optional int32 page_index = 2;</code>
       */
      public Builder clearPageIndex() {
        copyOnWrite();
        instance.clearPageIndex();
        return this;
      }

      /**
       * <code>optional int32 rank = 3;</code>
       */
      public boolean hasRank() {
        return instance.hasRank();
      }
      /**
       * <code>optional int32 rank = 3;</code>
       */
      public int getRank() {
        return instance.getRank();
      }
      /**
       * <code>optional int32 rank = 3;</code>
       */
      public Builder setRank(int value) {
        copyOnWrite();
        instance.setRank(value);
        return this;
      }
      /**
       * <code>optional int32 rank = 3;</code>
       */
      public Builder clearRank() {
        copyOnWrite();
        instance.clearRank();
        return this;
      }

      /**
       * <code>optional int32 grid_x = 4;</code>
       */
      public boolean hasGridX() {
        return instance.hasGridX();
      }
      /**
       * <code>optional int32 grid_x = 4;</code>
       */
      public int getGridX() {
        return instance.getGridX();
      }
      /**
       * <code>optional int32 grid_x = 4;</code>
       */
      public Builder setGridX(int value) {
        copyOnWrite();
        instance.setGridX(value);
        return this;
      }
      /**
       * <code>optional int32 grid_x = 4;</code>
       */
      public Builder clearGridX() {
        copyOnWrite();
        instance.clearGridX();
        return this;
      }

      /**
       * <code>optional int32 grid_y = 5;</code>
       */
      public boolean hasGridY() {
        return instance.hasGridY();
      }
      /**
       * <code>optional int32 grid_y = 5;</code>
       */
      public int getGridY() {
        return instance.getGridY();
      }
      /**
       * <code>optional int32 grid_y = 5;</code>
       */
      public Builder setGridY(int value) {
        copyOnWrite();
        instance.setGridY(value);
        return this;
      }
      /**
       * <code>optional int32 grid_y = 5;</code>
       */
      public Builder clearGridY() {
        copyOnWrite();
        instance.clearGridY();
        return this;
      }

      /**
       * <pre>
       * For container types only
       * </pre>
       *
       * <code>optional .userevent.ContainerType container_type = 6;</code>
       */
      public boolean hasContainerType() {
        return instance.hasContainerType();
      }
      /**
       * <pre>
       * For container types only
       * </pre>
       *
       * <code>optional .userevent.ContainerType container_type = 6;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.ContainerType getContainerType() {
        return instance.getContainerType();
      }
      /**
       * <pre>
       * For container types only
       * </pre>
       *
       * <code>optional .userevent.ContainerType container_type = 6;</code>
       */
      public Builder setContainerType(com.android.launcher3.userevent.LauncherLogProto.ContainerType value) {
        copyOnWrite();
        instance.setContainerType(value);
        return this;
      }
      /**
       * <pre>
       * For container types only
       * </pre>
       *
       * <code>optional .userevent.ContainerType container_type = 6;</code>
       */
      public Builder clearContainerType() {
        copyOnWrite();
        instance.clearContainerType();
        return this;
      }

      /**
       * <code>optional int32 cardinality = 7;</code>
       */
      public boolean hasCardinality() {
        return instance.hasCardinality();
      }
      /**
       * <code>optional int32 cardinality = 7;</code>
       */
      public int getCardinality() {
        return instance.getCardinality();
      }
      /**
       * <code>optional int32 cardinality = 7;</code>
       */
      public Builder setCardinality(int value) {
        copyOnWrite();
        instance.setCardinality(value);
        return this;
      }
      /**
       * <code>optional int32 cardinality = 7;</code>
       */
      public Builder clearCardinality() {
        copyOnWrite();
        instance.clearCardinality();
        return this;
      }

      /**
       * <pre>
       * For control types only
       * </pre>
       *
       * <code>optional .userevent.ControlType control_type = 8;</code>
       */
      public boolean hasControlType() {
        return instance.hasControlType();
      }
      /**
       * <pre>
       * For control types only
       * </pre>
       *
       * <code>optional .userevent.ControlType control_type = 8;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.ControlType getControlType() {
        return instance.getControlType();
      }
      /**
       * <pre>
       * For control types only
       * </pre>
       *
       * <code>optional .userevent.ControlType control_type = 8;</code>
       */
      public Builder setControlType(com.android.launcher3.userevent.LauncherLogProto.ControlType value) {
        copyOnWrite();
        instance.setControlType(value);
        return this;
      }
      /**
       * <pre>
       * For control types only
       * </pre>
       *
       * <code>optional .userevent.ControlType control_type = 8;</code>
       */
      public Builder clearControlType() {
        copyOnWrite();
        instance.clearControlType();
        return this;
      }

      /**
       * <pre>
       * For item types only
       * </pre>
       *
       * <code>optional .userevent.ItemType item_type = 9;</code>
       */
      public boolean hasItemType() {
        return instance.hasItemType();
      }
      /**
       * <pre>
       * For item types only
       * </pre>
       *
       * <code>optional .userevent.ItemType item_type = 9;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.ItemType getItemType() {
        return instance.getItemType();
      }
      /**
       * <pre>
       * For item types only
       * </pre>
       *
       * <code>optional .userevent.ItemType item_type = 9;</code>
       */
      public Builder setItemType(com.android.launcher3.userevent.LauncherLogProto.ItemType value) {
        copyOnWrite();
        instance.setItemType(value);
        return this;
      }
      /**
       * <pre>
       * For item types only
       * </pre>
       *
       * <code>optional .userevent.ItemType item_type = 9;</code>
       */
      public Builder clearItemType() {
        copyOnWrite();
        instance.clearItemType();
        return this;
      }

      /**
       * <code>optional int32 package_name_hash = 10;</code>
       */
      public boolean hasPackageNameHash() {
        return instance.hasPackageNameHash();
      }
      /**
       * <code>optional int32 package_name_hash = 10;</code>
       */
      public int getPackageNameHash() {
        return instance.getPackageNameHash();
      }
      /**
       * <code>optional int32 package_name_hash = 10;</code>
       */
      public Builder setPackageNameHash(int value) {
        copyOnWrite();
        instance.setPackageNameHash(value);
        return this;
      }
      /**
       * <code>optional int32 package_name_hash = 10;</code>
       */
      public Builder clearPackageNameHash() {
        copyOnWrite();
        instance.clearPackageNameHash();
        return this;
      }

      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 component_hash = 11;</code>
       */
      public boolean hasComponentHash() {
        return instance.hasComponentHash();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 component_hash = 11;</code>
       */
      public int getComponentHash() {
        return instance.getComponentHash();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 component_hash = 11;</code>
       */
      public Builder setComponentHash(int value) {
        copyOnWrite();
        instance.setComponentHash(value);
        return this;
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 component_hash = 11;</code>
       */
      public Builder clearComponentHash() {
        copyOnWrite();
        instance.clearComponentHash();
        return this;
      }

      /**
       * <pre>
       * Used for ItemType.SHORTCUT
       * </pre>
       *
       * <code>optional int32 intent_hash = 12;</code>
       */
      public boolean hasIntentHash() {
        return instance.hasIntentHash();
      }
      /**
       * <pre>
       * Used for ItemType.SHORTCUT
       * </pre>
       *
       * <code>optional int32 intent_hash = 12;</code>
       */
      public int getIntentHash() {
        return instance.getIntentHash();
      }
      /**
       * <pre>
       * Used for ItemType.SHORTCUT
       * </pre>
       *
       * <code>optional int32 intent_hash = 12;</code>
       */
      public Builder setIntentHash(int value) {
        copyOnWrite();
        instance.setIntentHash(value);
        return this;
      }
      /**
       * <pre>
       * Used for ItemType.SHORTCUT
       * </pre>
       *
       * <code>optional int32 intent_hash = 12;</code>
       */
      public Builder clearIntentHash() {
        copyOnWrite();
        instance.clearIntentHash();
        return this;
      }

      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_x = 13 [default = 1];</code>
       */
      public boolean hasSpanX() {
        return instance.hasSpanX();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_x = 13 [default = 1];</code>
       */
      public int getSpanX() {
        return instance.getSpanX();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_x = 13 [default = 1];</code>
       */
      public Builder setSpanX(int value) {
        copyOnWrite();
        instance.setSpanX(value);
        return this;
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_x = 13 [default = 1];</code>
       */
      public Builder clearSpanX() {
        copyOnWrite();
        instance.clearSpanX();
        return this;
      }

      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_y = 14 [default = 1];</code>
       */
      public boolean hasSpanY() {
        return instance.hasSpanY();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_y = 14 [default = 1];</code>
       */
      public int getSpanY() {
        return instance.getSpanY();
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_y = 14 [default = 1];</code>
       */
      public Builder setSpanY(int value) {
        copyOnWrite();
        instance.setSpanY(value);
        return this;
      }
      /**
       * <pre>
       * Used for ItemType.WIDGET
       * </pre>
       *
       * <code>optional int32 span_y = 14 [default = 1];</code>
       */
      public Builder clearSpanY() {
        copyOnWrite();
        instance.clearSpanY();
        return this;
      }

      /**
       * <code>optional int32 predictedRank = 15;</code>
       */
      public boolean hasPredictedRank() {
        return instance.hasPredictedRank();
      }
      /**
       * <code>optional int32 predictedRank = 15;</code>
       */
      public int getPredictedRank() {
        return instance.getPredictedRank();
      }
      /**
       * <code>optional int32 predictedRank = 15;</code>
       */
      public Builder setPredictedRank(int value) {
        copyOnWrite();
        instance.setPredictedRank(value);
        return this;
      }
      /**
       * <code>optional int32 predictedRank = 15;</code>
       */
      public Builder clearPredictedRank() {
        copyOnWrite();
        instance.clearPredictedRank();
        return this;
      }

      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public boolean hasExtension() {
        return instance.hasExtension();
      }
      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension getExtension() {
        return instance.getExtension();
      }
      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public Builder setExtension(com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension value) {
        copyOnWrite();
        instance.setExtension(value);
        return this;
        }
      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public Builder setExtension(
          com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.Builder builderForValue) {
        copyOnWrite();
        instance.setExtension(builderForValue);
        return this;
      }
      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public Builder mergeExtension(com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension value) {
        copyOnWrite();
        instance.mergeExtension(value);
        return this;
      }
      /**
       * <code>optional .userevent.TargetExtension extension = 16;</code>
       */
      public Builder clearExtension() {  copyOnWrite();
        instance.clearExtension();
        return this;
      }

      /**
       * <code>optional .userevent.TipType tip_type = 17;</code>
       */
      public boolean hasTipType() {
        return instance.hasTipType();
      }
      /**
       * <code>optional .userevent.TipType tip_type = 17;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.TipType getTipType() {
        return instance.getTipType();
      }
      /**
       * <code>optional .userevent.TipType tip_type = 17;</code>
       */
      public Builder setTipType(com.android.launcher3.userevent.LauncherLogProto.TipType value) {
        copyOnWrite();
        instance.setTipType(value);
        return this;
      }
      /**
       * <code>optional .userevent.TipType tip_type = 17;</code>
       */
      public Builder clearTipType() {
        copyOnWrite();
        instance.clearTipType();
        return this;
      }

      /**
       * <code>optional int32 search_query_length = 18;</code>
       */
      public boolean hasSearchQueryLength() {
        return instance.hasSearchQueryLength();
      }
      /**
       * <code>optional int32 search_query_length = 18;</code>
       */
      public int getSearchQueryLength() {
        return instance.getSearchQueryLength();
      }
      /**
       * <code>optional int32 search_query_length = 18;</code>
       */
      public Builder setSearchQueryLength(int value) {
        copyOnWrite();
        instance.setSearchQueryLength(value);
        return this;
      }
      /**
       * <code>optional int32 search_query_length = 18;</code>
       */
      public Builder clearSearchQueryLength() {
        copyOnWrite();
        instance.clearSearchQueryLength();
        return this;
      }

      /**
       * <code>optional bool is_work_app = 19;</code>
       */
      public boolean hasIsWorkApp() {
        return instance.hasIsWorkApp();
      }
      /**
       * <code>optional bool is_work_app = 19;</code>
       */
      public boolean getIsWorkApp() {
        return instance.getIsWorkApp();
      }
      /**
       * <code>optional bool is_work_app = 19;</code>
       */
      public Builder setIsWorkApp(boolean value) {
        copyOnWrite();
        instance.setIsWorkApp(value);
        return this;
      }
      /**
       * <code>optional bool is_work_app = 19;</code>
       */
      public Builder clearIsWorkApp() {
        copyOnWrite();
        instance.clearIsWorkApp();
        return this;
      }

      /**
       * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
       */
      public boolean hasFromFolderLabelState() {
        return instance.hasFromFolderLabelState();
      }
      /**
       * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState getFromFolderLabelState() {
        return instance.getFromFolderLabelState();
      }
      /**
       * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
       */
      public Builder setFromFolderLabelState(com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState value) {
        copyOnWrite();
        instance.setFromFolderLabelState(value);
        return this;
      }
      /**
       * <code>optional .userevent.Target.FromFolderLabelState from_folder_label_state = 20;</code>
       */
      public Builder clearFromFolderLabelState() {
        copyOnWrite();
        instance.clearFromFolderLabelState();
        return this;
      }

      /**
       * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
       */
      public boolean hasToFolderLabelState() {
        return instance.hasToFolderLabelState();
      }
      /**
       * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState getToFolderLabelState() {
        return instance.getToFolderLabelState();
      }
      /**
       * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
       */
      public Builder setToFolderLabelState(com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState value) {
        copyOnWrite();
        instance.setToFolderLabelState(value);
        return this;
      }
      /**
       * <code>optional .userevent.Target.ToFolderLabelState to_folder_label_state = 21;</code>
       */
      public Builder clearToFolderLabelState() {
        copyOnWrite();
        instance.clearToFolderLabelState();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:userevent.Target)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.launcher3.userevent.LauncherLogProto.Target();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.android.launcher3.userevent.LauncherLogProto.Target other = (com.android.launcher3.userevent.LauncherLogProto.Target) arg1;
          type_ = visitor.visitInt(hasType(), type_,
              other.hasType(), other.type_);
          pageIndex_ = visitor.visitInt(
              hasPageIndex(), pageIndex_,
              other.hasPageIndex(), other.pageIndex_);
          rank_ = visitor.visitInt(
              hasRank(), rank_,
              other.hasRank(), other.rank_);
          gridX_ = visitor.visitInt(
              hasGridX(), gridX_,
              other.hasGridX(), other.gridX_);
          gridY_ = visitor.visitInt(
              hasGridY(), gridY_,
              other.hasGridY(), other.gridY_);
          containerType_ = visitor.visitInt(hasContainerType(), containerType_,
              other.hasContainerType(), other.containerType_);
          cardinality_ = visitor.visitInt(
              hasCardinality(), cardinality_,
              other.hasCardinality(), other.cardinality_);
          controlType_ = visitor.visitInt(hasControlType(), controlType_,
              other.hasControlType(), other.controlType_);
          itemType_ = visitor.visitInt(hasItemType(), itemType_,
              other.hasItemType(), other.itemType_);
          packageNameHash_ = visitor.visitInt(
              hasPackageNameHash(), packageNameHash_,
              other.hasPackageNameHash(), other.packageNameHash_);
          componentHash_ = visitor.visitInt(
              hasComponentHash(), componentHash_,
              other.hasComponentHash(), other.componentHash_);
          intentHash_ = visitor.visitInt(
              hasIntentHash(), intentHash_,
              other.hasIntentHash(), other.intentHash_);
          spanX_ = visitor.visitInt(
              hasSpanX(), spanX_,
              other.hasSpanX(), other.spanX_);
          spanY_ = visitor.visitInt(
              hasSpanY(), spanY_,
              other.hasSpanY(), other.spanY_);
          predictedRank_ = visitor.visitInt(
              hasPredictedRank(), predictedRank_,
              other.hasPredictedRank(), other.predictedRank_);
          extension_ = visitor.visitMessage(extension_, other.extension_);
          tipType_ = visitor.visitInt(hasTipType(), tipType_,
              other.hasTipType(), other.tipType_);
          searchQueryLength_ = visitor.visitInt(
              hasSearchQueryLength(), searchQueryLength_,
              other.hasSearchQueryLength(), other.searchQueryLength_);
          isWorkApp_ = visitor.visitBoolean(
              hasIsWorkApp(), isWorkApp_,
              other.hasIsWorkApp(), other.isWorkApp_);
          fromFolderLabelState_ = visitor.visitInt(hasFromFolderLabelState(), fromFolderLabelState_,
              other.hasFromFolderLabelState(), other.fromFolderLabelState_);
          toFolderLabelState_ = visitor.visitInt(hasToFolderLabelState(), toFolderLabelState_,
              other.hasToFolderLabelState(), other.toFolderLabelState_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Target.Type value = com.android.launcher3.userevent.LauncherLogProto.Target.Type.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    type_ = rawValue;
                  }
                  break;
                }
                case 16: {
                  bitField0_ |= 0x00000002;
                  pageIndex_ = input.readInt32();
                  break;
                }
                case 24: {
                  bitField0_ |= 0x00000004;
                  rank_ = input.readInt32();
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000008;
                  gridX_ = input.readInt32();
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  gridY_ = input.readInt32();
                  break;
                }
                case 48: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.ContainerType value = com.android.launcher3.userevent.LauncherLogProto.ContainerType.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(6, rawValue);
                  } else {
                    bitField0_ |= 0x00000020;
                    containerType_ = rawValue;
                  }
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000040;
                  cardinality_ = input.readInt32();
                  break;
                }
                case 64: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.ControlType value = com.android.launcher3.userevent.LauncherLogProto.ControlType.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(8, rawValue);
                  } else {
                    bitField0_ |= 0x00000080;
                    controlType_ = rawValue;
                  }
                  break;
                }
                case 72: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.ItemType value = com.android.launcher3.userevent.LauncherLogProto.ItemType.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(9, rawValue);
                  } else {
                    bitField0_ |= 0x00000100;
                    itemType_ = rawValue;
                  }
                  break;
                }
                case 80: {
                  bitField0_ |= 0x00000200;
                  packageNameHash_ = input.readInt32();
                  break;
                }
                case 88: {
                  bitField0_ |= 0x00000400;
                  componentHash_ = input.readInt32();
                  break;
                }
                case 96: {
                  bitField0_ |= 0x00000800;
                  intentHash_ = input.readInt32();
                  break;
                }
                case 104: {
                  bitField0_ |= 0x00001000;
                  spanX_ = input.readInt32();
                  break;
                }
                case 112: {
                  bitField0_ |= 0x00002000;
                  spanY_ = input.readInt32();
                  break;
                }
                case 120: {
                  bitField0_ |= 0x00004000;
                  predictedRank_ = input.readInt32();
                  break;
                }
                case 130: {
                  com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.Builder subBuilder = null;
                  if (((bitField0_ & 0x00008000) == 0x00008000)) {
                    subBuilder = extension_.toBuilder();
                  }
                  extension_ = input.readMessage(com.android.launcher3.userevent.LauncherLogExtensions.TargetExtension.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(extension_);
                    extension_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00008000;
                  break;
                }
                case 136: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.TipType value = com.android.launcher3.userevent.LauncherLogProto.TipType.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(17, rawValue);
                  } else {
                    bitField0_ |= 0x00010000;
                    tipType_ = rawValue;
                  }
                  break;
                }
                case 144: {
                  bitField0_ |= 0x00020000;
                  searchQueryLength_ = input.readInt32();
                  break;
                }
                case 152: {
                  bitField0_ |= 0x00040000;
                  isWorkApp_ = input.readBool();
                  break;
                }
                case 160: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState value = com.android.launcher3.userevent.LauncherLogProto.Target.FromFolderLabelState.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(20, rawValue);
                  } else {
                    bitField0_ |= 0x00080000;
                    fromFolderLabelState_ = rawValue;
                  }
                  break;
                }
                case 168: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState value = com.android.launcher3.userevent.LauncherLogProto.Target.ToFolderLabelState.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(21, rawValue);
                  } else {
                    bitField0_ |= 0x00100000;
                    toFolderLabelState_ = rawValue;
                  }
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.android.launcher3.userevent.LauncherLogProto.Target.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:userevent.Target)
    private static final com.android.launcher3.userevent.LauncherLogProto.Target DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Target();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.android.launcher3.userevent.LauncherLogProto.Target getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Target> PARSER;

    public static com.google.protobuf.Parser<Target> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:userevent.Action)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    boolean hasType();
    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Action.Type getType();

    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    boolean hasTouch();
    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Action.Touch getTouch();

    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    boolean hasDir();
    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Action.Direction getDir();

    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    boolean hasCommand();
    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Action.Command getCommand();

    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    boolean hasIsOutside();
    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    boolean getIsOutside();

    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    boolean hasIsStateChange();
    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    boolean getIsStateChange();
  }
  /**
   * <pre>
   * Used to define the action component of the LauncherEvent.
   * </pre>
   *
   * Protobuf type {@code userevent.Action}
   */
  public  static final class Action extends
      com.google.protobuf.GeneratedMessageLite<
          Action, Action.Builder> implements
      // @@protoc_insertion_point(message_implements:userevent.Action)
      ActionOrBuilder {
    private Action() {
    }
    /**
     * Protobuf enum {@code userevent.Action.Type}
     */
    public enum Type
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>TOUCH = 0;</code>
       */
      TOUCH(0),
      /**
       * <code>AUTOMATED = 1;</code>
       */
      AUTOMATED(1),
      /**
       * <code>COMMAND = 2;</code>
       */
      COMMAND(2),
      /**
       * <code>TIP = 3;</code>
       */
      TIP(3),
      /**
       * <pre>
       * HARD_KEYBOARD, ASSIST
       * </pre>
       *
       * <code>SOFT_KEYBOARD = 4;</code>
       */
      SOFT_KEYBOARD(4),
      ;

      /**
       * <code>TOUCH = 0;</code>
       */
      public static final int TOUCH_VALUE = 0;
      /**
       * <code>AUTOMATED = 1;</code>
       */
      public static final int AUTOMATED_VALUE = 1;
      /**
       * <code>COMMAND = 2;</code>
       */
      public static final int COMMAND_VALUE = 2;
      /**
       * <code>TIP = 3;</code>
       */
      public static final int TIP_VALUE = 3;
      /**
       * <pre>
       * HARD_KEYBOARD, ASSIST
       * </pre>
       *
       * <code>SOFT_KEYBOARD = 4;</code>
       */
      public static final int SOFT_KEYBOARD_VALUE = 4;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      public static Type forNumber(int value) {
        switch (value) {
          case 0: return TOUCH;
          case 1: return AUTOMATED;
          case 2: return COMMAND;
          case 3: return TIP;
          case 4: return SOFT_KEYBOARD;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Action.Type)
    }

    /**
     * Protobuf enum {@code userevent.Action.Touch}
     */
    public enum Touch
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>TAP = 0;</code>
       */
      TAP(0),
      /**
       * <code>LONGPRESS = 1;</code>
       */
      LONGPRESS(1),
      /**
       * <code>DRAGDROP = 2;</code>
       */
      DRAGDROP(2),
      /**
       * <code>SWIPE = 3;</code>
       */
      SWIPE(3),
      /**
       * <code>FLING = 4;</code>
       */
      FLING(4),
      /**
       * <code>PINCH = 5;</code>
       */
      PINCH(5),
      /**
       * <code>SWIPE_NOOP = 6;</code>
       */
      SWIPE_NOOP(6),
      ;

      /**
       * <code>TAP = 0;</code>
       */
      public static final int TAP_VALUE = 0;
      /**
       * <code>LONGPRESS = 1;</code>
       */
      public static final int LONGPRESS_VALUE = 1;
      /**
       * <code>DRAGDROP = 2;</code>
       */
      public static final int DRAGDROP_VALUE = 2;
      /**
       * <code>SWIPE = 3;</code>
       */
      public static final int SWIPE_VALUE = 3;
      /**
       * <code>FLING = 4;</code>
       */
      public static final int FLING_VALUE = 4;
      /**
       * <code>PINCH = 5;</code>
       */
      public static final int PINCH_VALUE = 5;
      /**
       * <code>SWIPE_NOOP = 6;</code>
       */
      public static final int SWIPE_NOOP_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Touch valueOf(int value) {
        return forNumber(value);
      }

      public static Touch forNumber(int value) {
        switch (value) {
          case 0: return TAP;
          case 1: return LONGPRESS;
          case 2: return DRAGDROP;
          case 3: return SWIPE;
          case 4: return FLING;
          case 5: return PINCH;
          case 6: return SWIPE_NOOP;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Touch>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Touch> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Touch>() {
              public Touch findValueByNumber(int number) {
                return Touch.forNumber(number);
              }
            };

      private final int value;

      private Touch(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Action.Touch)
    }

    /**
     * Protobuf enum {@code userevent.Action.Direction}
     */
    public enum Direction
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>NONE = 0;</code>
       */
      NONE(0),
      /**
       * <code>UP = 1;</code>
       */
      UP(1),
      /**
       * <code>DOWN = 2;</code>
       */
      DOWN(2),
      /**
       * <code>LEFT = 3;</code>
       */
      LEFT(3),
      /**
       * <code>RIGHT = 4;</code>
       */
      RIGHT(4),
      /**
       * <code>UPRIGHT = 5;</code>
       */
      UPRIGHT(5),
      /**
       * <code>UPLEFT = 6;</code>
       */
      UPLEFT(6),
      ;

      /**
       * <code>NONE = 0;</code>
       */
      public static final int NONE_VALUE = 0;
      /**
       * <code>UP = 1;</code>
       */
      public static final int UP_VALUE = 1;
      /**
       * <code>DOWN = 2;</code>
       */
      public static final int DOWN_VALUE = 2;
      /**
       * <code>LEFT = 3;</code>
       */
      public static final int LEFT_VALUE = 3;
      /**
       * <code>RIGHT = 4;</code>
       */
      public static final int RIGHT_VALUE = 4;
      /**
       * <code>UPRIGHT = 5;</code>
       */
      public static final int UPRIGHT_VALUE = 5;
      /**
       * <code>UPLEFT = 6;</code>
       */
      public static final int UPLEFT_VALUE = 6;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Direction valueOf(int value) {
        return forNumber(value);
      }

      public static Direction forNumber(int value) {
        switch (value) {
          case 0: return NONE;
          case 1: return UP;
          case 2: return DOWN;
          case 3: return LEFT;
          case 4: return RIGHT;
          case 5: return UPRIGHT;
          case 6: return UPLEFT;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Direction>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Direction> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Direction>() {
              public Direction findValueByNumber(int number) {
                return Direction.forNumber(number);
              }
            };

      private final int value;

      private Direction(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Action.Direction)
    }

    /**
     * Protobuf enum {@code userevent.Action.Command}
     */
    public enum Command
        implements com.google.protobuf.Internal.EnumLite {
      /**
       * <code>HOME_INTENT = 0;</code>
       */
      HOME_INTENT(0),
      /**
       * <code>BACK = 1;</code>
       */
      BACK(1),
      /**
       * <pre>
       * Indicates entry to one of Launcher container type target
       * </pre>
       *
       * <code>ENTRY = 2;</code>
       */
      ENTRY(2),
      /**
       * <pre>
       * not using the HOME_INTENT
       * </pre>
       *
       * <code>CANCEL = 3;</code>
       */
      CANCEL(3),
      /**
       * <pre>
       * Indicates thata confirmation screen was accepted
       * </pre>
       *
       * <code>CONFIRM = 4;</code>
       */
      CONFIRM(4),
      /**
       * <pre>
       * Indicates onStop() was called (screen time out, power off)
       * </pre>
       *
       * <code>STOP = 5;</code>
       */
      STOP(5),
      /**
       * <pre>
       * Indicates that Recents button was pressed
       * </pre>
       *
       * <code>RECENTS_BUTTON = 6;</code>
       */
      RECENTS_BUTTON(6),
      /**
       * <pre>
       * Indicates onResume() was called
       * </pre>
       *
       * <code>RESUME = 7;</code>
       */
      RESUME(7),
      ;

      /**
       * <code>HOME_INTENT = 0;</code>
       */
      public static final int HOME_INTENT_VALUE = 0;
      /**
       * <code>BACK = 1;</code>
       */
      public static final int BACK_VALUE = 1;
      /**
       * <pre>
       * Indicates entry to one of Launcher container type target
       * </pre>
       *
       * <code>ENTRY = 2;</code>
       */
      public static final int ENTRY_VALUE = 2;
      /**
       * <pre>
       * not using the HOME_INTENT
       * </pre>
       *
       * <code>CANCEL = 3;</code>
       */
      public static final int CANCEL_VALUE = 3;
      /**
       * <pre>
       * Indicates thata confirmation screen was accepted
       * </pre>
       *
       * <code>CONFIRM = 4;</code>
       */
      public static final int CONFIRM_VALUE = 4;
      /**
       * <pre>
       * Indicates onStop() was called (screen time out, power off)
       * </pre>
       *
       * <code>STOP = 5;</code>
       */
      public static final int STOP_VALUE = 5;
      /**
       * <pre>
       * Indicates that Recents button was pressed
       * </pre>
       *
       * <code>RECENTS_BUTTON = 6;</code>
       */
      public static final int RECENTS_BUTTON_VALUE = 6;
      /**
       * <pre>
       * Indicates onResume() was called
       * </pre>
       *
       * <code>RESUME = 7;</code>
       */
      public static final int RESUME_VALUE = 7;


      public final int getNumber() {
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Command valueOf(int value) {
        return forNumber(value);
      }

      public static Command forNumber(int value) {
        switch (value) {
          case 0: return HOME_INTENT;
          case 1: return BACK;
          case 2: return ENTRY;
          case 3: return CANCEL;
          case 4: return CONFIRM;
          case 5: return STOP;
          case 6: return RECENTS_BUTTON;
          case 7: return RESUME;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Command>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Command> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Command>() {
              public Command findValueByNumber(int number) {
                return Command.forNumber(number);
              }
            };

      private final int value;

      private Command(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:userevent.Action.Command)
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    public boolean hasType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Action.Type getType() {
      com.android.launcher3.userevent.LauncherLogProto.Action.Type result = com.android.launcher3.userevent.LauncherLogProto.Action.Type.forNumber(type_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Action.Type.TOUCH : result;
    }
    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    private void setType(com.android.launcher3.userevent.LauncherLogProto.Action.Type value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      type_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Action.Type type = 1;</code>
     */
    private void clearType() {
      bitField0_ = (bitField0_ & ~0x00000001);
      type_ = 0;
    }

    public static final int TOUCH_FIELD_NUMBER = 2;
    private int touch_;
    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    public boolean hasTouch() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Action.Touch getTouch() {
      com.android.launcher3.userevent.LauncherLogProto.Action.Touch result = com.android.launcher3.userevent.LauncherLogProto.Action.Touch.forNumber(touch_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Action.Touch.TAP : result;
    }
    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    private void setTouch(com.android.launcher3.userevent.LauncherLogProto.Action.Touch value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      touch_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Action.Touch touch = 2;</code>
     */
    private void clearTouch() {
      bitField0_ = (bitField0_ & ~0x00000002);
      touch_ = 0;
    }

    public static final int DIR_FIELD_NUMBER = 3;
    private int dir_;
    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    public boolean hasDir() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Action.Direction getDir() {
      com.android.launcher3.userevent.LauncherLogProto.Action.Direction result = com.android.launcher3.userevent.LauncherLogProto.Action.Direction.forNumber(dir_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Action.Direction.NONE : result;
    }
    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    private void setDir(com.android.launcher3.userevent.LauncherLogProto.Action.Direction value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000004;
      dir_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Action.Direction dir = 3;</code>
     */
    private void clearDir() {
      bitField0_ = (bitField0_ & ~0x00000004);
      dir_ = 0;
    }

    public static final int COMMAND_FIELD_NUMBER = 4;
    private int command_;
    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    public boolean hasCommand() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Action.Command getCommand() {
      com.android.launcher3.userevent.LauncherLogProto.Action.Command result = com.android.launcher3.userevent.LauncherLogProto.Action.Command.forNumber(command_);
      return result == null ? com.android.launcher3.userevent.LauncherLogProto.Action.Command.HOME_INTENT : result;
    }
    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    private void setCommand(com.android.launcher3.userevent.LauncherLogProto.Action.Command value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000008;
      command_ = value.getNumber();
    }
    /**
     * <code>optional .userevent.Action.Command command = 4;</code>
     */
    private void clearCommand() {
      bitField0_ = (bitField0_ & ~0x00000008);
      command_ = 0;
    }

    public static final int IS_OUTSIDE_FIELD_NUMBER = 5;
    private boolean isOutside_;
    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    public boolean hasIsOutside() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    public boolean getIsOutside() {
      return isOutside_;
    }
    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    private void setIsOutside(boolean value) {
      bitField0_ |= 0x00000010;
      isOutside_ = value;
    }
    /**
     * <pre>
     * Log if the action was performed on outside of the container
     * </pre>
     *
     * <code>optional bool is_outside = 5;</code>
     */
    private void clearIsOutside() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isOutside_ = false;
    }

    public static final int IS_STATE_CHANGE_FIELD_NUMBER = 6;
    private boolean isStateChange_;
    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    public boolean hasIsStateChange() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    public boolean getIsStateChange() {
      return isStateChange_;
    }
    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    private void setIsStateChange(boolean value) {
      bitField0_ |= 0x00000020;
      isStateChange_ = value;
    }
    /**
     * <code>optional bool is_state_change = 6;</code>
     */
    private void clearIsStateChange() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isStateChange_ = false;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, touch_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(3, dir_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(4, command_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, isOutside_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isStateChange_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, touch_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, dir_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, command_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isOutside_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isStateChange_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.Action parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.launcher3.userevent.LauncherLogProto.Action prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Used to define the action component of the LauncherEvent.
     * </pre>
     *
     * Protobuf type {@code userevent.Action}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.launcher3.userevent.LauncherLogProto.Action, Builder> implements
        // @@protoc_insertion_point(builder_implements:userevent.Action)
        com.android.launcher3.userevent.LauncherLogProto.ActionOrBuilder {
      // Construct using com.android.launcher3.userevent.LauncherLogProto.Action.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional .userevent.Action.Type type = 1;</code>
       */
      public boolean hasType() {
        return instance.hasType();
      }
      /**
       * <code>optional .userevent.Action.Type type = 1;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Action.Type getType() {
        return instance.getType();
      }
      /**
       * <code>optional .userevent.Action.Type type = 1;</code>
       */
      public Builder setType(com.android.launcher3.userevent.LauncherLogProto.Action.Type value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <code>optional .userevent.Action.Type type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <code>optional .userevent.Action.Touch touch = 2;</code>
       */
      public boolean hasTouch() {
        return instance.hasTouch();
      }
      /**
       * <code>optional .userevent.Action.Touch touch = 2;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Action.Touch getTouch() {
        return instance.getTouch();
      }
      /**
       * <code>optional .userevent.Action.Touch touch = 2;</code>
       */
      public Builder setTouch(com.android.launcher3.userevent.LauncherLogProto.Action.Touch value) {
        copyOnWrite();
        instance.setTouch(value);
        return this;
      }
      /**
       * <code>optional .userevent.Action.Touch touch = 2;</code>
       */
      public Builder clearTouch() {
        copyOnWrite();
        instance.clearTouch();
        return this;
      }

      /**
       * <code>optional .userevent.Action.Direction dir = 3;</code>
       */
      public boolean hasDir() {
        return instance.hasDir();
      }
      /**
       * <code>optional .userevent.Action.Direction dir = 3;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Action.Direction getDir() {
        return instance.getDir();
      }
      /**
       * <code>optional .userevent.Action.Direction dir = 3;</code>
       */
      public Builder setDir(com.android.launcher3.userevent.LauncherLogProto.Action.Direction value) {
        copyOnWrite();
        instance.setDir(value);
        return this;
      }
      /**
       * <code>optional .userevent.Action.Direction dir = 3;</code>
       */
      public Builder clearDir() {
        copyOnWrite();
        instance.clearDir();
        return this;
      }

      /**
       * <code>optional .userevent.Action.Command command = 4;</code>
       */
      public boolean hasCommand() {
        return instance.hasCommand();
      }
      /**
       * <code>optional .userevent.Action.Command command = 4;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Action.Command getCommand() {
        return instance.getCommand();
      }
      /**
       * <code>optional .userevent.Action.Command command = 4;</code>
       */
      public Builder setCommand(com.android.launcher3.userevent.LauncherLogProto.Action.Command value) {
        copyOnWrite();
        instance.setCommand(value);
        return this;
      }
      /**
       * <code>optional .userevent.Action.Command command = 4;</code>
       */
      public Builder clearCommand() {
        copyOnWrite();
        instance.clearCommand();
        return this;
      }

      /**
       * <pre>
       * Log if the action was performed on outside of the container
       * </pre>
       *
       * <code>optional bool is_outside = 5;</code>
       */
      public boolean hasIsOutside() {
        return instance.hasIsOutside();
      }
      /**
       * <pre>
       * Log if the action was performed on outside of the container
       * </pre>
       *
       * <code>optional bool is_outside = 5;</code>
       */
      public boolean getIsOutside() {
        return instance.getIsOutside();
      }
      /**
       * <pre>
       * Log if the action was performed on outside of the container
       * </pre>
       *
       * <code>optional bool is_outside = 5;</code>
       */
      public Builder setIsOutside(boolean value) {
        copyOnWrite();
        instance.setIsOutside(value);
        return this;
      }
      /**
       * <pre>
       * Log if the action was performed on outside of the container
       * </pre>
       *
       * <code>optional bool is_outside = 5;</code>
       */
      public Builder clearIsOutside() {
        copyOnWrite();
        instance.clearIsOutside();
        return this;
      }

      /**
       * <code>optional bool is_state_change = 6;</code>
       */
      public boolean hasIsStateChange() {
        return instance.hasIsStateChange();
      }
      /**
       * <code>optional bool is_state_change = 6;</code>
       */
      public boolean getIsStateChange() {
        return instance.getIsStateChange();
      }
      /**
       * <code>optional bool is_state_change = 6;</code>
       */
      public Builder setIsStateChange(boolean value) {
        copyOnWrite();
        instance.setIsStateChange(value);
        return this;
      }
      /**
       * <code>optional bool is_state_change = 6;</code>
       */
      public Builder clearIsStateChange() {
        copyOnWrite();
        instance.clearIsStateChange();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:userevent.Action)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.launcher3.userevent.LauncherLogProto.Action();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.android.launcher3.userevent.LauncherLogProto.Action other = (com.android.launcher3.userevent.LauncherLogProto.Action) arg1;
          type_ = visitor.visitInt(hasType(), type_,
              other.hasType(), other.type_);
          touch_ = visitor.visitInt(hasTouch(), touch_,
              other.hasTouch(), other.touch_);
          dir_ = visitor.visitInt(hasDir(), dir_,
              other.hasDir(), other.dir_);
          command_ = visitor.visitInt(hasCommand(), command_,
              other.hasCommand(), other.command_);
          isOutside_ = visitor.visitBoolean(
              hasIsOutside(), isOutside_,
              other.hasIsOutside(), other.isOutside_);
          isStateChange_ = visitor.visitBoolean(
              hasIsStateChange(), isStateChange_,
              other.hasIsStateChange(), other.isStateChange_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Action.Type value = com.android.launcher3.userevent.LauncherLogProto.Action.Type.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(1, rawValue);
                  } else {
                    bitField0_ |= 0x00000001;
                    type_ = rawValue;
                  }
                  break;
                }
                case 16: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Action.Touch value = com.android.launcher3.userevent.LauncherLogProto.Action.Touch.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(2, rawValue);
                  } else {
                    bitField0_ |= 0x00000002;
                    touch_ = rawValue;
                  }
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Action.Direction value = com.android.launcher3.userevent.LauncherLogProto.Action.Direction.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(3, rawValue);
                  } else {
                    bitField0_ |= 0x00000004;
                    dir_ = rawValue;
                  }
                  break;
                }
                case 32: {
                  int rawValue = input.readEnum();
                  com.android.launcher3.userevent.LauncherLogProto.Action.Command value = com.android.launcher3.userevent.LauncherLogProto.Action.Command.forNumber(rawValue);
                  if (value == null) {
                    super.mergeVarintField(4, rawValue);
                  } else {
                    bitField0_ |= 0x00000008;
                    command_ = rawValue;
                  }
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000010;
                  isOutside_ = input.readBool();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000020;
                  isStateChange_ = input.readBool();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.android.launcher3.userevent.LauncherLogProto.Action.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:userevent.Action)
    private static final com.android.launcher3.userevent.LauncherLogProto.Action DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Action();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.android.launcher3.userevent.LauncherLogProto.Action getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Action> PARSER;

    public static com.google.protobuf.Parser<Action> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface LauncherEventOrBuilder extends
      // @@protoc_insertion_point(interface_extends:userevent.LauncherEvent)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    boolean hasAction();
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Action getAction();

    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> 
        getSrcTargetList();
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Target getSrcTarget(int index);
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    int getSrcTargetCount();

    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> 
        getDestTargetList();
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    com.android.launcher3.userevent.LauncherLogProto.Target getDestTarget(int index);
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    int getDestTargetCount();

    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    boolean hasActionDurationMillis();
    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    long getActionDurationMillis();

    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    boolean hasElapsedContainerMillis();
    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    long getElapsedContainerMillis();

    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    boolean hasElapsedSessionMillis();
    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    long getElapsedSessionMillis();

    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasIsInMultiWindowMode();
    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getIsInMultiWindowMode();

    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean hasIsInLandscapeMode();
    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated boolean getIsInLandscapeMode();

    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    boolean hasExtension();
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension getExtension();
  }
  /**
   * <pre>
   * Context free grammar of typical user interaction:
   *         Action (Touch) + Target
   *         Action (Touch) + Target + Target
   * </pre>
   *
   * Protobuf type {@code userevent.LauncherEvent}
   */
  public  static final class LauncherEvent extends
      com.google.protobuf.GeneratedMessageLite<
          LauncherEvent, LauncherEvent.Builder> implements
      // @@protoc_insertion_point(message_implements:userevent.LauncherEvent)
      LauncherEventOrBuilder {
    private LauncherEvent() {
      srcTarget_ = emptyProtobufList();
      destTarget_ = emptyProtobufList();
    }
    private int bitField0_;
    public static final int ACTION_FIELD_NUMBER = 1;
    private com.android.launcher3.userevent.LauncherLogProto.Action action_;
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Action getAction() {
      return action_ == null ? com.android.launcher3.userevent.LauncherLogProto.Action.getDefaultInstance() : action_;
    }
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    private void setAction(com.android.launcher3.userevent.LauncherLogProto.Action value) {
      if (value == null) {
        throw new NullPointerException();
      }
      action_ = value;
      bitField0_ |= 0x00000001;
      }
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    private void setAction(
        com.android.launcher3.userevent.LauncherLogProto.Action.Builder builderForValue) {
      action_ = builderForValue.build();
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    private void mergeAction(com.android.launcher3.userevent.LauncherLogProto.Action value) {
      if (action_ != null &&
          action_ != com.android.launcher3.userevent.LauncherLogProto.Action.getDefaultInstance()) {
        action_ =
          com.android.launcher3.userevent.LauncherLogProto.Action.newBuilder(action_).mergeFrom(value).buildPartial();
      } else {
        action_ = value;
      }
      bitField0_ |= 0x00000001;
    }
    /**
     * <code>required .userevent.Action action = 1;</code>
     */
    private void clearAction() {  action_ = null;
      bitField0_ = (bitField0_ & ~0x00000001);
    }

    public static final int SRC_TARGET_FIELD_NUMBER = 2;
    private com.google.protobuf.Internal.ProtobufList<com.android.launcher3.userevent.LauncherLogProto.Target> srcTarget_;
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    public java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> getSrcTargetList() {
      return srcTarget_;
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    public java.util.List<? extends com.android.launcher3.userevent.LauncherLogProto.TargetOrBuilder> 
        getSrcTargetOrBuilderList() {
      return srcTarget_;
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    public int getSrcTargetCount() {
      return srcTarget_.size();
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Target getSrcTarget(int index) {
      return srcTarget_.get(index);
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.TargetOrBuilder getSrcTargetOrBuilder(
        int index) {
      return srcTarget_.get(index);
    }
    private void ensureSrcTargetIsMutable() {
      if (!srcTarget_.isModifiable()) {
        srcTarget_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(srcTarget_);
       }
    }

    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void setSrcTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSrcTargetIsMutable();
      srcTarget_.set(index, value);
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void setSrcTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureSrcTargetIsMutable();
      srcTarget_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void addSrcTarget(com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSrcTargetIsMutable();
      srcTarget_.add(value);
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void addSrcTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureSrcTargetIsMutable();
      srcTarget_.add(index, value);
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void addSrcTarget(
        com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureSrcTargetIsMutable();
      srcTarget_.add(builderForValue.build());
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void addSrcTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureSrcTargetIsMutable();
      srcTarget_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void addAllSrcTarget(
        java.lang.Iterable<? extends com.android.launcher3.userevent.LauncherLogProto.Target> values) {
      ensureSrcTargetIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, srcTarget_);
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void clearSrcTarget() {
      srcTarget_ = emptyProtobufList();
    }
    /**
     * <pre>
     * List of targets that touch actions can be operated on.
     * </pre>
     *
     * <code>repeated .userevent.Target src_target = 2;</code>
     */
    private void removeSrcTarget(int index) {
      ensureSrcTargetIsMutable();
      srcTarget_.remove(index);
    }

    public static final int DEST_TARGET_FIELD_NUMBER = 3;
    private com.google.protobuf.Internal.ProtobufList<com.android.launcher3.userevent.LauncherLogProto.Target> destTarget_;
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    public java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> getDestTargetList() {
      return destTarget_;
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    public java.util.List<? extends com.android.launcher3.userevent.LauncherLogProto.TargetOrBuilder> 
        getDestTargetOrBuilderList() {
      return destTarget_;
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    public int getDestTargetCount() {
      return destTarget_.size();
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.Target getDestTarget(int index) {
      return destTarget_.get(index);
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    public com.android.launcher3.userevent.LauncherLogProto.TargetOrBuilder getDestTargetOrBuilder(
        int index) {
      return destTarget_.get(index);
    }
    private void ensureDestTargetIsMutable() {
      if (!destTarget_.isModifiable()) {
        destTarget_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(destTarget_);
       }
    }

    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void setDestTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDestTargetIsMutable();
      destTarget_.set(index, value);
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void setDestTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureDestTargetIsMutable();
      destTarget_.set(index, builderForValue.build());
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void addDestTarget(com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDestTargetIsMutable();
      destTarget_.add(value);
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void addDestTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureDestTargetIsMutable();
      destTarget_.add(index, value);
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void addDestTarget(
        com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureDestTargetIsMutable();
      destTarget_.add(builderForValue.build());
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void addDestTarget(
        int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
      ensureDestTargetIsMutable();
      destTarget_.add(index, builderForValue.build());
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void addAllDestTarget(
        java.lang.Iterable<? extends com.android.launcher3.userevent.LauncherLogProto.Target> values) {
      ensureDestTargetIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, destTarget_);
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void clearDestTarget() {
      destTarget_ = emptyProtobufList();
    }
    /**
     * <code>repeated .userevent.Target dest_target = 3;</code>
     */
    private void removeDestTarget(int index) {
      ensureDestTargetIsMutable();
      destTarget_.remove(index);
    }

    public static final int ACTION_DURATION_MILLIS_FIELD_NUMBER = 4;
    private long actionDurationMillis_;
    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    public boolean hasActionDurationMillis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    public long getActionDurationMillis() {
      return actionDurationMillis_;
    }
    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    private void setActionDurationMillis(long value) {
      bitField0_ |= 0x00000002;
      actionDurationMillis_ = value;
    }
    /**
     * <code>optional int64 action_duration_millis = 4;</code>
     */
    private void clearActionDurationMillis() {
      bitField0_ = (bitField0_ & ~0x00000002);
      actionDurationMillis_ = 0L;
    }

    public static final int ELAPSED_CONTAINER_MILLIS_FIELD_NUMBER = 5;
    private long elapsedContainerMillis_;
    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    public boolean hasElapsedContainerMillis() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    public long getElapsedContainerMillis() {
      return elapsedContainerMillis_;
    }
    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    private void setElapsedContainerMillis(long value) {
      bitField0_ |= 0x00000004;
      elapsedContainerMillis_ = value;
    }
    /**
     * <code>optional int64 elapsed_container_millis = 5;</code>
     */
    private void clearElapsedContainerMillis() {
      bitField0_ = (bitField0_ & ~0x00000004);
      elapsedContainerMillis_ = 0L;
    }

    public static final int ELAPSED_SESSION_MILLIS_FIELD_NUMBER = 6;
    private long elapsedSessionMillis_;
    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    public boolean hasElapsedSessionMillis() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    public long getElapsedSessionMillis() {
      return elapsedSessionMillis_;
    }
    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    private void setElapsedSessionMillis(long value) {
      bitField0_ |= 0x00000008;
      elapsedSessionMillis_ = value;
    }
    /**
     * <code>optional int64 elapsed_session_millis = 6;</code>
     */
    private void clearElapsedSessionMillis() {
      bitField0_ = (bitField0_ & ~0x00000008);
      elapsedSessionMillis_ = 0L;
    }

    public static final int IS_IN_MULTI_WINDOW_MODE_FIELD_NUMBER = 7;
    private boolean isInMultiWindowMode_;
    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasIsInMultiWindowMode() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getIsInMultiWindowMode() {
      return isInMultiWindowMode_;
    }
    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    private void setIsInMultiWindowMode(boolean value) {
      bitField0_ |= 0x00000010;
      isInMultiWindowMode_ = value;
    }
    /**
     * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
     */
    private void clearIsInMultiWindowMode() {
      bitField0_ = (bitField0_ & ~0x00000010);
      isInMultiWindowMode_ = false;
    }

    public static final int IS_IN_LANDSCAPE_MODE_FIELD_NUMBER = 8;
    private boolean isInLandscapeMode_;
    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean hasIsInLandscapeMode() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    @java.lang.Deprecated public boolean getIsInLandscapeMode() {
      return isInLandscapeMode_;
    }
    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    private void setIsInLandscapeMode(boolean value) {
      bitField0_ |= 0x00000020;
      isInLandscapeMode_ = value;
    }
    /**
     * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
     */
    private void clearIsInLandscapeMode() {
      bitField0_ = (bitField0_ & ~0x00000020);
      isInLandscapeMode_ = false;
    }

    public static final int EXTENSION_FIELD_NUMBER = 9;
    private com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension extension_;
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    public boolean hasExtension() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    public com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension getExtension() {
      return extension_ == null ? com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.getDefaultInstance() : extension_;
    }
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    private void setExtension(com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension value) {
      if (value == null) {
        throw new NullPointerException();
      }
      extension_ = value;
      bitField0_ |= 0x00000040;
      }
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    private void setExtension(
        com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.Builder builderForValue) {
      extension_ = builderForValue.build();
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    private void mergeExtension(com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension value) {
      if (extension_ != null &&
          extension_ != com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.getDefaultInstance()) {
        extension_ =
          com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.newBuilder(extension_).mergeFrom(value).buildPartial();
      } else {
        extension_ = value;
      }
      bitField0_ |= 0x00000040;
    }
    /**
     * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
     */
    private void clearExtension() {  extension_ = null;
      bitField0_ = (bitField0_ & ~0x00000040);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, getAction());
      }
      for (int i = 0; i < srcTarget_.size(); i++) {
        output.writeMessage(2, srcTarget_.get(i));
      }
      for (int i = 0; i < destTarget_.size(); i++) {
        output.writeMessage(3, destTarget_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(4, actionDurationMillis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(5, elapsedContainerMillis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(6, elapsedSessionMillis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(7, isInMultiWindowMode_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(8, isInLandscapeMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeMessage(9, getExtension());
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getAction());
      }
      for (int i = 0; i < srcTarget_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, srcTarget_.get(i));
      }
      for (int i = 0; i < destTarget_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, destTarget_.get(i));
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, actionDurationMillis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, elapsedContainerMillis_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, elapsedSessionMillis_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(7, isInMultiWindowMode_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, isInLandscapeMode_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getExtension());
      }
      size += unknownFields.getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.android.launcher3.userevent.LauncherLogProto.LauncherEvent prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * Context free grammar of typical user interaction:
     *         Action (Touch) + Target
     *         Action (Touch) + Target + Target
     * </pre>
     *
     * Protobuf type {@code userevent.LauncherEvent}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.android.launcher3.userevent.LauncherLogProto.LauncherEvent, Builder> implements
        // @@protoc_insertion_point(builder_implements:userevent.LauncherEvent)
        com.android.launcher3.userevent.LauncherLogProto.LauncherEventOrBuilder {
      // Construct using com.android.launcher3.userevent.LauncherLogProto.LauncherEvent.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public boolean hasAction() {
        return instance.hasAction();
      }
      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Action getAction() {
        return instance.getAction();
      }
      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public Builder setAction(com.android.launcher3.userevent.LauncherLogProto.Action value) {
        copyOnWrite();
        instance.setAction(value);
        return this;
        }
      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public Builder setAction(
          com.android.launcher3.userevent.LauncherLogProto.Action.Builder builderForValue) {
        copyOnWrite();
        instance.setAction(builderForValue);
        return this;
      }
      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public Builder mergeAction(com.android.launcher3.userevent.LauncherLogProto.Action value) {
        copyOnWrite();
        instance.mergeAction(value);
        return this;
      }
      /**
       * <code>required .userevent.Action action = 1;</code>
       */
      public Builder clearAction() {  copyOnWrite();
        instance.clearAction();
        return this;
      }

      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> getSrcTargetList() {
        return java.util.Collections.unmodifiableList(
            instance.getSrcTargetList());
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public int getSrcTargetCount() {
        return instance.getSrcTargetCount();
      }/**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Target getSrcTarget(int index) {
        return instance.getSrcTarget(index);
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder setSrcTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.setSrcTarget(index, value);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder setSrcTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.setSrcTarget(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder addSrcTarget(com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.addSrcTarget(value);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder addSrcTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.addSrcTarget(index, value);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder addSrcTarget(
          com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.addSrcTarget(builderForValue);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder addSrcTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.addSrcTarget(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder addAllSrcTarget(
          java.lang.Iterable<? extends com.android.launcher3.userevent.LauncherLogProto.Target> values) {
        copyOnWrite();
        instance.addAllSrcTarget(values);
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder clearSrcTarget() {
        copyOnWrite();
        instance.clearSrcTarget();
        return this;
      }
      /**
       * <pre>
       * List of targets that touch actions can be operated on.
       * </pre>
       *
       * <code>repeated .userevent.Target src_target = 2;</code>
       */
      public Builder removeSrcTarget(int index) {
        copyOnWrite();
        instance.removeSrcTarget(index);
        return this;
      }

      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public java.util.List<com.android.launcher3.userevent.LauncherLogProto.Target> getDestTargetList() {
        return java.util.Collections.unmodifiableList(
            instance.getDestTargetList());
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public int getDestTargetCount() {
        return instance.getDestTargetCount();
      }/**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public com.android.launcher3.userevent.LauncherLogProto.Target getDestTarget(int index) {
        return instance.getDestTarget(index);
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder setDestTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.setDestTarget(index, value);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder setDestTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.setDestTarget(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder addDestTarget(com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.addDestTarget(value);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder addDestTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target value) {
        copyOnWrite();
        instance.addDestTarget(index, value);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder addDestTarget(
          com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.addDestTarget(builderForValue);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder addDestTarget(
          int index, com.android.launcher3.userevent.LauncherLogProto.Target.Builder builderForValue) {
        copyOnWrite();
        instance.addDestTarget(index, builderForValue);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder addAllDestTarget(
          java.lang.Iterable<? extends com.android.launcher3.userevent.LauncherLogProto.Target> values) {
        copyOnWrite();
        instance.addAllDestTarget(values);
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder clearDestTarget() {
        copyOnWrite();
        instance.clearDestTarget();
        return this;
      }
      /**
       * <code>repeated .userevent.Target dest_target = 3;</code>
       */
      public Builder removeDestTarget(int index) {
        copyOnWrite();
        instance.removeDestTarget(index);
        return this;
      }

      /**
       * <code>optional int64 action_duration_millis = 4;</code>
       */
      public boolean hasActionDurationMillis() {
        return instance.hasActionDurationMillis();
      }
      /**
       * <code>optional int64 action_duration_millis = 4;</code>
       */
      public long getActionDurationMillis() {
        return instance.getActionDurationMillis();
      }
      /**
       * <code>optional int64 action_duration_millis = 4;</code>
       */
      public Builder setActionDurationMillis(long value) {
        copyOnWrite();
        instance.setActionDurationMillis(value);
        return this;
      }
      /**
       * <code>optional int64 action_duration_millis = 4;</code>
       */
      public Builder clearActionDurationMillis() {
        copyOnWrite();
        instance.clearActionDurationMillis();
        return this;
      }

      /**
       * <code>optional int64 elapsed_container_millis = 5;</code>
       */
      public boolean hasElapsedContainerMillis() {
        return instance.hasElapsedContainerMillis();
      }
      /**
       * <code>optional int64 elapsed_container_millis = 5;</code>
       */
      public long getElapsedContainerMillis() {
        return instance.getElapsedContainerMillis();
      }
      /**
       * <code>optional int64 elapsed_container_millis = 5;</code>
       */
      public Builder setElapsedContainerMillis(long value) {
        copyOnWrite();
        instance.setElapsedContainerMillis(value);
        return this;
      }
      /**
       * <code>optional int64 elapsed_container_millis = 5;</code>
       */
      public Builder clearElapsedContainerMillis() {
        copyOnWrite();
        instance.clearElapsedContainerMillis();
        return this;
      }

      /**
       * <code>optional int64 elapsed_session_millis = 6;</code>
       */
      public boolean hasElapsedSessionMillis() {
        return instance.hasElapsedSessionMillis();
      }
      /**
       * <code>optional int64 elapsed_session_millis = 6;</code>
       */
      public long getElapsedSessionMillis() {
        return instance.getElapsedSessionMillis();
      }
      /**
       * <code>optional int64 elapsed_session_millis = 6;</code>
       */
      public Builder setElapsedSessionMillis(long value) {
        copyOnWrite();
        instance.setElapsedSessionMillis(value);
        return this;
      }
      /**
       * <code>optional int64 elapsed_session_millis = 6;</code>
       */
      public Builder clearElapsedSessionMillis() {
        copyOnWrite();
        instance.clearElapsedSessionMillis();
        return this;
      }

      /**
       * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasIsInMultiWindowMode() {
        return instance.hasIsInMultiWindowMode();
      }
      /**
       * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getIsInMultiWindowMode() {
        return instance.getIsInMultiWindowMode();
      }
      /**
       * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIsInMultiWindowMode(boolean value) {
        copyOnWrite();
        instance.setIsInMultiWindowMode(value);
        return this;
      }
      /**
       * <code>optional bool is_in_multi_window_mode = 7 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearIsInMultiWindowMode() {
        copyOnWrite();
        instance.clearIsInMultiWindowMode();
        return this;
      }

      /**
       * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean hasIsInLandscapeMode() {
        return instance.hasIsInLandscapeMode();
      }
      /**
       * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public boolean getIsInLandscapeMode() {
        return instance.getIsInLandscapeMode();
      }
      /**
       * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder setIsInLandscapeMode(boolean value) {
        copyOnWrite();
        instance.setIsInLandscapeMode(value);
        return this;
      }
      /**
       * <code>optional bool is_in_landscape_mode = 8 [deprecated = true];</code>
       */
      @java.lang.Deprecated public Builder clearIsInLandscapeMode() {
        copyOnWrite();
        instance.clearIsInLandscapeMode();
        return this;
      }

      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public boolean hasExtension() {
        return instance.hasExtension();
      }
      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension getExtension() {
        return instance.getExtension();
      }
      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public Builder setExtension(com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension value) {
        copyOnWrite();
        instance.setExtension(value);
        return this;
        }
      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public Builder setExtension(
          com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.Builder builderForValue) {
        copyOnWrite();
        instance.setExtension(builderForValue);
        return this;
      }
      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public Builder mergeExtension(com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension value) {
        copyOnWrite();
        instance.mergeExtension(value);
        return this;
      }
      /**
       * <code>optional .userevent.LauncherEventExtension extension = 9;</code>
       */
      public Builder clearExtension() {  copyOnWrite();
        instance.clearExtension();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:userevent.LauncherEvent)
    }
    private byte memoizedIsInitialized = -1;
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.android.launcher3.userevent.LauncherLogProto.LauncherEvent();
        }
        case IS_INITIALIZED: {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return DEFAULT_INSTANCE;
          if (isInitialized == 0) return null;

          boolean shouldMemoize = ((Boolean) arg0).booleanValue();
          if (!hasAction()) {
            if (shouldMemoize) {
              memoizedIsInitialized = 0;
            }
            return null;
          }
          if (shouldMemoize) memoizedIsInitialized = 1;
          return DEFAULT_INSTANCE;

        }
        case MAKE_IMMUTABLE: {
          srcTarget_.makeImmutable();
          destTarget_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.android.launcher3.userevent.LauncherLogProto.LauncherEvent other = (com.android.launcher3.userevent.LauncherLogProto.LauncherEvent) arg1;
          action_ = visitor.visitMessage(action_, other.action_);
          srcTarget_= visitor.visitList(srcTarget_, other.srcTarget_);
          destTarget_= visitor.visitList(destTarget_, other.destTarget_);
          actionDurationMillis_ = visitor.visitLong(
              hasActionDurationMillis(), actionDurationMillis_,
              other.hasActionDurationMillis(), other.actionDurationMillis_);
          elapsedContainerMillis_ = visitor.visitLong(
              hasElapsedContainerMillis(), elapsedContainerMillis_,
              other.hasElapsedContainerMillis(), other.elapsedContainerMillis_);
          elapsedSessionMillis_ = visitor.visitLong(
              hasElapsedSessionMillis(), elapsedSessionMillis_,
              other.hasElapsedSessionMillis(), other.elapsedSessionMillis_);
          isInMultiWindowMode_ = visitor.visitBoolean(
              hasIsInMultiWindowMode(), isInMultiWindowMode_,
              other.hasIsInMultiWindowMode(), other.isInMultiWindowMode_);
          isInLandscapeMode_ = visitor.visitBoolean(
              hasIsInLandscapeMode(), isInLandscapeMode_,
              other.hasIsInLandscapeMode(), other.isInLandscapeMode_);
          extension_ = visitor.visitMessage(extension_, other.extension_);
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownField(tag, input)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.android.launcher3.userevent.LauncherLogProto.Action.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000001) == 0x00000001)) {
                    subBuilder = action_.toBuilder();
                  }
                  action_ = input.readMessage(com.android.launcher3.userevent.LauncherLogProto.Action.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(action_);
                    action_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000001;
                  break;
                }
                case 18: {
                  if (!srcTarget_.isModifiable()) {
                    srcTarget_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(srcTarget_);
                  }
                  srcTarget_.add(
                      input.readMessage(com.android.launcher3.userevent.LauncherLogProto.Target.parser(), extensionRegistry));
                  break;
                }
                case 26: {
                  if (!destTarget_.isModifiable()) {
                    destTarget_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(destTarget_);
                  }
                  destTarget_.add(
                      input.readMessage(com.android.launcher3.userevent.LauncherLogProto.Target.parser(), extensionRegistry));
                  break;
                }
                case 32: {
                  bitField0_ |= 0x00000002;
                  actionDurationMillis_ = input.readInt64();
                  break;
                }
                case 40: {
                  bitField0_ |= 0x00000004;
                  elapsedContainerMillis_ = input.readInt64();
                  break;
                }
                case 48: {
                  bitField0_ |= 0x00000008;
                  elapsedSessionMillis_ = input.readInt64();
                  break;
                }
                case 56: {
                  bitField0_ |= 0x00000010;
                  isInMultiWindowMode_ = input.readBool();
                  break;
                }
                case 64: {
                  bitField0_ |= 0x00000020;
                  isInLandscapeMode_ = input.readBool();
                  break;
                }
                case 74: {
                  com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.Builder subBuilder = null;
                  if (((bitField0_ & 0x00000040) == 0x00000040)) {
                    subBuilder = extension_.toBuilder();
                  }
                  extension_ = input.readMessage(com.android.launcher3.userevent.LauncherLogExtensions.LauncherEventExtension.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(extension_);
                    extension_ = subBuilder.buildPartial();
                  }
                  bitField0_ |= 0x00000040;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.android.launcher3.userevent.LauncherLogProto.LauncherEvent.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:userevent.LauncherEvent)
    private static final com.android.launcher3.userevent.LauncherLogProto.LauncherEvent DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new LauncherEvent();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.android.launcher3.userevent.LauncherLogProto.LauncherEvent getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<LauncherEvent> PARSER;

    public static com.google.protobuf.Parser<LauncherEvent> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
